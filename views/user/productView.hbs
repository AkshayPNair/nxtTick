<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Details Page</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-qb2bO15Nw9oIf0NUvh9e2kA1cOIsYeMoa0/N9XqXutKIKaIHtwgjU0jM7fFUK8gA" crossorigin="anonymous">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/notyf/notyf.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf/notyf.min.css">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Inter:wght@400;500;600&display=swap');

    .heart-icon {
        transition: all 0.3s ease;
        cursor: pointer;
    }
    .heart-icon.active svg {
        fill: red;
        stroke: red;
    }
    .heart-icon:hover {
        transform: scale(1.1);
    }
    .main-image-container .heart-icon {
        transition: all 0.3s ease;
        cursor: pointer;
        opacity: 0.9;
    }
    .main-image-container .heart-icon:hover {
        transform: scale(1.1);
        opacity: 1;
    }
    .main-image-container .heart-icon.active svg {
        fill: red;
        stroke: red;
    }
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    .product-card {
        transition: transform 0.3s ease-in-out;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    .product-card:hover {
        transform: scale(1.05);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    .product-card {
        animation: fadeIn 0.5s ease-out;
    }
    .discount-badge {
        background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
    }
  </style>
 
</head>
<body class="bg-gray-100 font-['Inter']">
  {{!-- header section --}}
  {{>header}}
  
    <!-- Alerts Container -->
  <div id="alerts-container" class="position-fixed bottom-0 end-0 bg-green-100" style="z-index: 1050;"></div>
  
  <div class="container mx-auto py-8 px-4">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start bg-gray-100 rounded-xl  p-6 ">
      <!-- Left Section: Images -->
      <div class="flex flex-col items-center lg:items-center">
        <!-- Main Image with Heart Icon -->
        <div class="w-full lg:w-3/4 mb-6 main-image-container relative">
          <img id="main-image" src="{{data.images.[0]}}" alt="Main Product Image" class="w-full rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
          <!-- Add heart icon overlay -->
          <button onclick="toggleWishlist(this, '{{data._id}}')" class="heart-icon absolute top-4 right-4 bg-white p-2 rounded-full shadow-md hover:shadow-lg {{#if data.isInWishlist}}active{{/if}}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="{{#if data.isInWishlist}}red{{else}}none{{/if}}" viewBox="0 0 24 24" stroke="{{#if data.isInWishlist}}red{{else}}currentColor{{/if}}">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
          </button>
        </div>
        <!-- Thumbnails -->
        <div class="flex space-x-4">
          <img src="{{data.images.[0]}}" alt="Thumbnail 1" class="w-16 h-16 rounded-lg border-2 border-gray-200 cursor-pointer hover:border-blue-500 transition-colors" onclick="changeImage('{{data.images.[0]}}')">
          <img src="{{data.images.[1]}}" alt="Thumbnail 2" class="w-16 h-16 rounded-lg border-2 border-gray-200 cursor-pointer hover:border-blue-500 transition-colors" onclick="changeImage('{{data.images.[1]}}')">
          <img src="{{data.images.[2]}}" alt="Thumbnail 3" class="w-16 h-16 rounded-lg border-2 border-gray-200 cursor-pointer hover:border-blue-500 transition-colors" onclick="changeImage('{{data.images.[2]}}')">
          <img src="{{data.images.[3]}}" alt="Thumbnail 4" class="w-16 h-16 rounded-lg border-2 border-gray-200 cursor-pointer hover:border-blue-500 transition-colors" onclick="changeImage('{{data.images.[3]}}')">
        </div>
      </div>

      <!-- Right Section: Details -->
      <div class="px-6 lg:px-8">
        <!-- Product Title -->
        <h1 class="text-2xl lg:text-3xl font-bold text-gray-800 mb-4 hover:text-gray-700 transition-colors">
          {{data.name}}
        </h1>
        <!-- Price -->
        <div class="mt-4">
          {{#if data.activeOffer}}
            <div class="flex flex-col">
              <div class="flex items-center gap-2">
                <span class="text-2xl font-semibold text-red-600 hover:text-red-700 transition-colors">₹{{data.finalPrice}}</span>
                <span class="text-gray-400 font-semibold line-through">₹{{data.price}}</span>
              </div>
              <div class="flex items-center gap-2">
                <span class="bg-green-200 text-green-800 font-semibold text-xs px-3 py-1.5 rounded-lg shadow-sm hover:bg-green-300 transition-colors">
                  {{data.activeOffer.type}}: {{data.activeOffer.discountValue}}% OFF
                </span>
              </div>
            </div>
          {{else}}
            <span class="text-2xl font-semibold text-red-600 hover:text-red-700 transition-colors">₹{{data.price}}</span>
          {{/if}}
        </div>
        <!-- Ratings -->
        <div class="mt-3 flex items-center">
          <div class="flex text-yellow-400 text-xl hover:text-yellow-500 transition-colors">
            ★★★★☆
          </div>
          <span class="ml-2 text-gray-500">(5 Customer Reviews)</span>
        </div>
        <!-- Quantity Selector -->
        <div class="mb-6 mt-6">
          <label class="block text-gray-700 font-medium mb-2">Quantity</label>
          <div class="flex items-center border-2 rounded-lg w-32 bg-white hover:border-blue-400 transition-colors">
            <button id="decrease" class="px-3 py-2 text-gray-500 hover:text-gray-700 transition-colors">-</button>
            <span id="quantity" class="flex-1 text-center">1</span>
            <button id="increase" class="px-3 py-2 text-gray-500 hover:text-gray-700 transition-colors">+</button>
          </div>
        </div>

        <!-- Hidden Limit Exceeded Message -->
        <div id="limit-exceeded" class="hidden text-red-600 mt-2 font-semibold">
          Quantity limit exceeded. Maximum quantity is 4.
        </div>
        
        <!-- Stock Availability -->
        <p class="mt-3 mb-5 text-md font-bold">
          <span class="{{#if (eq data.stock 0)}}bg-red-100 text-red-600{{else if (lte data.stock 10)}}bg-orange-200 text-orange-600{{else if (lte data.stock 20)}}bg-yellow-200 text-yellow-600 border-2 border-gray-100{{else if (gt data.stock 20)}}bg-green-200 text-green-600 {{/if}} px-3 py-1.5 rounded-full text-sm shadow-sm hover:shadow-md transition-shadow">
            {{#if (eq data.stock 0)}}Out of Stock
            {{else if (lte data.stock 10)}}Low Stock
            {{else if (lte data.stock 20)}}Limited Stock
            {{else if (gt data.stock 20)}}In Stock
            {{/if}}
          </span>
        </p>
        <!-- Description -->
        <div class="mb-6">
          <h2 class="text-lg font-bold text-gray-800">Description</h2>
          <p class="text-gray-600 text-sm leading-relaxed mt-6 hover:text-gray-700 transition-colors">
            {{data.description}}
          </p>
        </div>
        <!-- Action Buttons -->
        <div class="mt-10 flex space-x-4">
          <button onclick="addToCart('{{data._id}}')" class="flex-1 bg-black text-white py-3 px-4 rounded-md hover:bg-gray-800 transform hover:scale-105 transition-all duration-300 shadow-md hover:shadow-lg">Add to Cart</button>
          {{!-- <button class="flex-1 bg-blue-500 text-white py-3 px-4 rounded-md hover:bg-blue-600 transform hover:scale-105 transition-all duration-300 shadow-md hover:shadow-lg">Buy Now</button> --}}
        </div>
      </div>
    </div>
  </div>




  <section class="px-4 sm:px-6 bg-gray-50 lg:px-8 py-12">
    <!-- Section Title -->
    <h1 class="text-center text-4xl font-bold text-gray-800 mb-10">Similar Products</h1>
    <!-- Cards Container -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {{#each find}}
        <div class="bg-white rounded-lg overflow-hidden product-card">
            <div class="relative">
                <img src="{{this.images.[0]}}" onclick="load('{{this._id}}')" alt="{{this.name}}" 
                     class="w-full h-70 object-cover cursor-pointer hover:opacity-90 transition-opacity">
                <button onclick="toggleWishlist(this,'{{this._id}}')" 
                        class="heart-icon absolute top-3 right-3 bg-white p-2 rounded-full shadow-md {{#if this.isInWishlist}}active{{/if}}">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="{{#if this.isInWishlist}}red{{else}}none{{/if}}" 
                         viewBox="0 0 24 24" stroke="{{#if this.isInWishlist}}red{{else}}currentColor{{/if}}">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                    </svg>
                </button>
            </div>
            <div class="p-4">
                <h2 class="text-lg font-bold text-gray-800 hover:text-blue-600 transition-colors cursor-pointer">{{this.name}}</h2>
                <p class="text-sm text-gray-600 mb-2">Sixth Scale Figure</p>
                <div class="flex justify-between items-center mt-2">
                    {{#if this.activeOffer}}
                    <div class="flex flex-col">
                        <div class="flex items-center gap-2">
                            <span class="text-red-600 font-semibold text-lg">₹{{roundPrice this.finalPrice}}</span>
                            <span class="text-gray-400 line-through font-semibold text-sm">₹{{roundPrice this.price}}</span>
                            <span class="discount-badge text-white px-2 py-1 rounded-md text-xs font-semibold">
                                {{this.activeOffer.discountValue}}% OFF
                            </span>
                        </div>
                    </div>
                    {{else}}
                    <span class="text-red-600 font-semibold text-lg">₹{{roundPrice this.price}}</span>
                    {{/if}}
                </div>
            </div>
        </div>
        {{/each}}
    </div>
  </section>

  {{!-- footer section --}}
  {{>footer}}

 

  <script>
    // Change Image
    function changeImage(newSrc) {
      const mainImage = document.getElementById('main-image');
      mainImage.src = newSrc;
    }

    // Zoom Effect
    const mainImage = document.getElementById("main-image");
    const imageContainer = mainImage.parentElement;

    imageContainer.addEventListener("mousemove", (e) => {
      const rect = imageContainer.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const width = imageContainer.offsetWidth;
      const height = imageContainer.offsetHeight;
      const xPercent = (x / width) * 100;
      const yPercent = (y / height) * 100;

      mainImage.style.transformOrigin = `${xPercent}% ${yPercent}%`;
      mainImage.style.transform = "scale(1.5)";
    });

    imageContainer.addEventListener("mouseleave", () => {
      mainImage.style.transform = "scale(1)";
      mainImage.style.transformOrigin = "center center";
    });

    // Load Product Details
    function load(productId) {
      window.location.href = `/user/productView/${productId}`;
    }

  // Quantity Controls
  document.getElementById("increase").addEventListener("click", function() {
    const quantityElement = document.getElementById("quantity");
    let quantity = parseInt(quantityElement.textContent);
    const limitExceededMessage = document.getElementById("limit-exceeded");

    // Limit quantity to 4
    if (quantity < 4) {
      quantityElement.textContent = quantity + 1;
      limitExceededMessage.classList.add("hidden"); // Hide the limit message
    } else {
      // Show limit exceeded message
      limitExceededMessage.classList.remove("hidden");
    }
  });

  document.getElementById("decrease").addEventListener("click", function() {
    const quantityElement = document.getElementById("quantity");
    let quantity = parseInt(quantityElement.textContent);
    const limitExceededMessage = document.getElementById("limit-exceeded");
    
    // Decrease quantity only if it's greater than 1
    if (quantity > 1) {
      quantityElement.textContent = quantity - 1;
      limitExceededMessage.classList.add("hidden"); // Hide the limit message when decreasing
    }
  });

const notyf = new Notyf({
    duration: 3000, // Duration of the notification
    position: {
      x: 'right', // Notify position (right or left)
      y: 'bottom', // Notify position (top or bottom)
    },
    types: [
      {
        type: 'success',
        background: 'green',
        duration: 3000,
      },
      {
        type: 'error',
        background: 'red',
        duration: 3000,
      },
      {
        type: 'info',
        background: 'blue',
        duration:3000,
      },
    ],
  });
// Add to Cart Function
async function addToCart(productId) {
  const quantity = document.getElementById("quantity").textContent;
  try {
    const response = await fetch("/user/addToCart", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        productId: productId,
        quantity: parseInt(quantity),
      }),
    });
    
    const data = await response.json();

    
    if (data.status === 'false') {
        notyf.error('Please login to add items to cart');
        setTimeout(() => {
          window.location.href = '/user/login';
        }, 2000);
        return;
    }
    
     if (data.status) {
        notyf.success(data.message);
      } else {
        notyf.error(data.message || "Failed to add product to cart.");
      }
    } catch (error) {
      console.error("Error adding product to cart:", error);
      notyf.error("An error occurred. Please try again later.");
    }
}

async function toggleWishlist(button, productId) {
    try {
        const response = await fetch(`/user/toggle-wishlist/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (data.status === 'false') {
            notyf.error('Please login to add items to wishlist');
            setTimeout(() => {
                window.location.href = '/user/login';
            }, 1500);
            return;
        }

        if (data.success) {
            // Update both the main product heart icon and similar products heart icons
            const heartIcons = document.querySelectorAll(`.heart-icon[onclick*="${productId}"]`);
            heartIcons.forEach(heartBtn => {
                const heartSvg = heartBtn.querySelector('svg');
                if (heartBtn.classList.contains('active')) {
                    heartBtn.classList.remove('active');
                    heartSvg.setAttribute('fill', 'none');
                    heartSvg.setAttribute('stroke', 'currentColor');
                } else {
                    heartBtn.classList.add('active');
                    heartSvg.setAttribute('fill', 'red');
                    heartSvg.setAttribute('stroke', 'red');
                }
            });
            
            notyf.success(data.message || (button.classList.contains('active') ? 'Added to wishlist' : 'Removed from wishlist'));
        } else {
            throw new Error(data.message || 'Failed to update wishlist');
        }
    } catch (error) {
        console.error('Error:', error);
        notyf.error('Something went wrong');
    }
}

  </script>

  <style>
    .main-image-container {
      position: relative;
      overflow: hidden;
    }
    #main-image {
      transition: transform 0.2s ease-out;
      transform-origin: center center;
    }
  </style>
</body>
</html>
