<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout Page</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/notyf/notyf.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf/notyf.min.css">
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Inter:wght@400;500;600&display=swap');
    
    body {
      font-family: 'Inter', sans-serif;
    }
    
    h1, h2, h3, h4, h5, h6 {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
    }

    .section-heading {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
    }

    .product-name {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
    }

    .price-text {
      font-family: 'Inter', sans-serif;
      font-weight: 500;
    }

    .button-text {
      font-family: 'Inter', sans-serif;
      font-weight: 500;
    }

    .address-text {
      font-family: 'Inter', sans-serif;
    }

    .modal-title {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
    }

    .form-label {
      font-family: 'Inter', sans-serif;
      font-weight: 500;
    }

    .summary-text {
      font-family: 'Inter', sans-serif;
    }
  </style>
</head>
<body class="bg-gray-50 font-['Inter']">
  {{>header}}
  <div class="container mx-auto px-4 py-8">
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Left Section: Product Details & Address -->
      <div class="flex-grow">
        <!-- Product Details -->
        <div class="bg-white p-6 rounded-lg shadow-md mb-6">
          <h2 class="text-xl font-semibold mb-4 section-heading">Product Details</h2>
          {{#each cartItems}}
          <div class="flex items-center space-x-4 mb-5 border-b">
            <img src="{{this.product.images.[0]}}" alt="Product" class="w-20 h-20 object-cover rounded-md">
            <div class="flex-1">
              <h3 class="text-lg font-semibold product-name">{{this.product.name}}</h3>
              <p class="text-gray-500 summary-text">Quantity : {{this.quantity}}</p>
              {{#if this.product.activeOffer}}
                <div class="flex items-center gap-2 mb-5">
                  <span class="text-red-600 font-semibold price-text">Rs. {{roundPrice this.product.finalPrice}}</span>
                  <span class="text-gray-400 font-semibold line-through text-sm price-text">Rs. {{roundPrice this.product.price}}</span>
                  <span class="bg-green-200 text-green-600 font-semibold rounded-md text-xs px-2 price-text">
                    {{this.product.activeOffer.discountValue}}% OFF
                  </span>
                </div>
              {{else}}
                <p class="text-lg font-bold text-red-600 mb-5 price-text">Rs. {{roundPrice this.product.price}}</p>
              {{/if}}
            </div>
          </div>
          {{/each}}
        </div>

        <!-- Address Selection -->
        <div class="bg-white p-6 rounded-lg shadow-md">
          <h2 class="text-xl font-semibold mb-4 section-heading">Select Address</h2>
          <!-- Begin Form -->
          <form id="checkoutForm">
            <div class="grid grid-cols-1 gap-4">
              {{#each address}}  
              <label class="block border-2 border-gray-300 rounded-lg p-4 flex items-start space-x-4 cursor-pointer transition-all duration-200 hover:border-blue-400 peer-checked:border-blue-600 peer-checked:ring-2 peer-checked:ring-blue-600">
                <input type="radio" name="addressId" value="{{_id}}" class="mt-1 mr-2 peer" required>
                <div>
                  <p class="text-sm font-medium">{{name}}</p>
                  <p class="text-sm text-gray-500">
                    {{addressLine1}}, {{addressLine2}}<br>
                    {{city}}, {{state}}, {{pinCode}}<br>
                    {{country}}<br>
                    <strong>Phone:</strong> {{phone}}
                  </p>
                </div>
              </label>
              {{/each}}
            </div>
            <button type="button" onclick="openAddressModal()" class="group px-4 py-2.5 mt-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white text-sm font-semibold rounded-lg shadow hover:from-blue-700 hover:to-blue-800 transform hover:scale-[1.02] transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-1 flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transform group-hover:translate-y-[-1px] transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
              </svg>
              Add New Address
            </button>
        </div>
      </div>

      <!-- Right Section: Order Summary -->
      <div class="lg:w-1/3 flex-shrink-0">
        <div class="bg-white p-8 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300">
          <h2 class="text-xl font-semibold mb-6 section-heading  bg-clip-text ">Order Summary</h2>

          {{#if hasActiveOffers}}
            <!-- Show message when products have discounts -->
            <div class="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-100">
              <p class="text-sm text-blue-700 font-medium">Coupon cannot be applied with existing product discounts</p>
            </div>
          {{else}}
            <!-- Discount Code - Only show if no product has discounts -->
            <div class="mb-6">
              <label for="coupon-code" class="block text-sm font-medium text-gray-700 mb-2">Discount Code</label>
              <div class="flex items-center gap-2">
                <select id="coupon-code" name="couponCode" class="block w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200">
                  <option value="">Select a coupon</option>
                  {{#each coupons}}
                    <option value="{{this.couponCode}}">{{this.couponCode}}</option>
                  {{/each}}
                </select>
                <button type="button" onclick="applyCoupon()" class="px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-blue-800 transform hover:scale-[1.02] transition-all duration-200">Apply</button>
              </div>
            </div>
          {{/if}}

          <!-- Pricing Details -->
          <div class="border-t border-gray-200 pt-6 mb-6 space-y-4">
            <div class="flex justify-between items-center">
              <span class="text-gray-600">Subtotal</span>
              <span class="font-medium">Rs. {{total}}</span>
            </div>

            {{#each cartItems}}
              {{#if this.product.activeOffer}}
              <div class="flex justify-between items-center">
                <span class="text-gray-600">Discount</span>
                <div class="flex items-center gap-2">
                  <span class="text-green-600 font-medium">-{{this.product.activeOffer.discountValue}}%</span>
                  <span class="bg-green-100 text-green-700 text-xs font-medium px-2 py-1 rounded-full">
                    {{this.product.activeOffer.type}}
                  </span>
                </div>
              </div>
              {{/if}}
            {{/each}}

            <div id="discount-row" class="flex justify-between items-center {{#unless appliedCoupon}}hidden{{/unless}}">
              <span class="text-gray-600">Coupon Discount</span>
              <span id="discount-amount" class="text-green-600 font-semibold">
                {{#if appliedCoupon}}Rs. {{appliedCoupon.discount}}{{/if}}
              </span>
            </div>

            <div class="flex justify-between items-center pt-4 border-t border-gray-200">
              <span class="text-lg font-semibold">Total</span>
              <span id="final-total" class="text-lg font-bold text-red-600">
                Rs. {{#if appliedCoupon}}
                {{appliedCoupon.finalTotal}}
                {{else if hasActiveOffers}}
                  {{finalTotal}}
                {{else}}
                {{total}}
                {{/if}}
              </span>
            </div>
          </div>

          <!-- Payment Options -->
          <div class="space-y-4">
            <p class="font-medium text-gray-700">Select Payment Method:</p>
            <label class="flex items-center p-3 border border-gray-200 rounded-lg hover:border-blue-400 transition-all duration-200 cursor-pointer">
              <input type="radio" name="paymentMethod" value="Wallet" class="mr-3" required>
              <span class="text-gray-700">Wallet (Balance: <span class="text-red-600 font-medium">Rs. {{wallet.balance}}</span>)</span>
            </label>
            <label class="flex items-center p-3 border border-gray-200 rounded-lg hover:border-blue-400 transition-all duration-200 cursor-pointer">
              <input type="radio" name="paymentMethod" value="Razorpay" class="mr-3" required>
              <span class="text-gray-700">Razorpay</span>
            </label>
            <label class="flex items-center p-3 border border-gray-200 rounded-lg hover:border-blue-400 transition-all duration-200 cursor-pointer">
              <input type="radio" name="paymentMethod" value="COD" class="mr-3" required>
              <span class="text-gray-700">Cash on Delivery</span>
            </label>
            <div id="cod-message" class="ml-6 text-red-500 text-sm font-medium mt-2 hidden">
              COD not available for orders above Rs. 1000.
            </div>
          </div>

          <!-- Place Order Button -->
          <button type="submit" class="w-full mt-8 px-6 py-2.5 bg-gradient-to-r from-blue-600 to-blue-700 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-blue-800 transform hover:scale-[1.02] transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2" onclick="submitOrder()">
            Place Order
          </button>
        </div>
      </div>
      </form> <!-- End Form -->
    </div>
  </div>
   <!-- Add Address Modal -->
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-60 backdrop-blur-sm hidden transform transition-all duration-300" id="addAddressModal">
        <div class="bg-white p-8 rounded-2xl shadow-2xl w-[32rem] transform transition-all duration-300 scale-95 hover:shadow-blue-200">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent modal-title">Add New Address</h2>
                <button type="button" class="text-gray-400 hover:text-gray-600 transition-colors duration-200" data-modal-close="addAddressModal">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <form id="addAddressForm" class="space-y-5">
                <div class="grid grid-cols-2 gap-4">
                    <div class="col-span-2">
                        <input type="text" placeholder="Full Name" name="name" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" >
                    </div>
                    <div>
                        <input type="text" placeholder="Phone Number" name="phone" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" >
                    </div>
                    <div>
                        <input type="text" placeholder="PIN Code" name="pinCode" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" >
                    </div>
                    <div class="col-span-2">
                        <input type="text" placeholder="Address Line 1" name="addressLine1" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" >
                    </div>
                    <div class="col-span-2">
                        <input type="text" placeholder="Address Line 2 (Optional)" name="addressLine2" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200">
                    </div>
                    <div>
                        <input type="text" placeholder="City" name="city" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" >
                    </div>
                    <div>
                        <input type="text" placeholder="State" name="state" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" >
                    </div>
                    <div class="col-span-2">
                        <input type="text" placeholder="Country" name="country" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200" >
                    </div>
                </div>
                <label class="flex items-center space-x-3 py-2">
                    <input type="checkbox" name="isDefault" class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-400">
                    <span class="text-gray-700 font-medium">Set as Default Address</span>
                </label>
                <div class="flex justify-end space-x-4 mt-8">
                    <button type="button" class="px-6 py-2.5 rounded-lg border border-gray-300 text-gray-700 font-semibold hover:bg-gray-50 transition-all duration-200" data-modal-close="addAddressModal">Cancel</button>
                    <button type="submit" class="px-6 py-2.5 bg-gradient-to-r from-blue-600 to-blue-700 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-blue-800 transform hover:scale-[1.02] transition-all duration-200">Save Address</button>
                </div>
            </form>
        </div>
    </div>

  <script>
    async function submitOrder() {
        event.preventDefault();
        const form = document.getElementById('checkoutForm');

        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        // Add the final total (including discount) to the data
        const finalTotalElement = document.getElementById('final-total');
        const finalTotal = parseFloat(finalTotalElement.textContent.replace('Rs. ', ''));
        data.finalAmount = finalTotal;

        
        

        try {
            const response = await fetch('/user/checkout', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });
            const result = await response.json();

            if (response.ok) {
                if (data.paymentMethod === 'Razorpay') {
                    const options = {
                        key: result.key_id,
                        amount: result.amount,
                        currency: "INR",
                        name: "nxtTick",
                        description: "Purchase Payment",
                        order_id: result.razorpayOrderId,
                        handler: function (response) {
                            fetch('/user/verify-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: result.orderId
                                })
                            })
                            .then(res => res.json())
                            .then(data => {
                                if (data.status) {
                                    // Show success alert before redirecting
                                    Swal.fire({
                                        title: 'Order Placed Successfully!',
                                        text: 'Thank you for shopping with us.',
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            window.location.href = '/user/orders';
                                        }
                                    });
                                }
                            });
                        },
                        modal: {
                            ondismiss: function() {
                                fetch('/user/payment-failed', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ orderId: result.orderId })
                                })
                                .then(() => {
                                    Swal.fire({
                                        title: 'Payment Failed',
                                        text: 'Your payment was not completed.',
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            window.location.href = '/user/orders';
                                        }
                                    });
                                });
                            }
                        },
                        prefill: {
                            name: "{{user.name}}",
                            email: "{{user.email}}"
                        },
                        theme: {
                            color: "#3B82F6"
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', function (response) {
                        fetch('/user/payment-failed', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ orderId: result.orderId })
                        })
                        .then(() => {
                            Swal.fire({
                                title: 'Payment Failed',
                                text: response.error.description || 'Payment failed',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = '/user/orders';
                                }
                            });
                        });
                    });
                    rzp.open();
                } else {
                    // Handle other payment methods (COD, Wallet)
                    Swal.fire({
                        title: result.message,
                        text: 'Thank you for shopping with us.',
                        icon: 'success',
                        confirmButtonText: 'OK',
                    }).then(() => {
                        window.location.href = '/user/orders';
                    });
                }
            } else {
                notyf.error(result.message);
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error',
                text: 'Unable to place the order. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK',
            });
        }
    }
    const notyf = new Notyf({
    duration: 3000, // Duration of the notification
    position: {
      x: 'right', // Notify position (right or left)
      y: 'bottom', // Notify position (top or bottom)
    },
    types: [
      {
        type: 'success',
        background: 'green',
        duration: 3000,
      },
      {
        type: 'error',
        background: 'red',
        duration: 3000,
      },
      {
        type: 'info',
        background: 'blue',
        duration:3000,
      },
    ],
  });

  function openAddressModal() {
    document.getElementById('addAddressModal').classList.remove('hidden');
  }

  function closeAddressModal() {
    document.getElementById('addAddressModal').classList.add('hidden');
    document.getElementById('addAddressForm').reset();
  }

  function validatePhone(phone) {
    const phoneRegex = /^[0-9]{10}$/;
    return phoneRegex.test(phone);
  }

  function validatePinCode(pinCode) {
    const pinCodeRegex = /^[0-9]{6}$/;
    return pinCodeRegex.test(pinCode);
  }

  function validateName(name) {
    const nameRegex = /^[A-Za-z\s]{3,50}$/;
    return nameRegex.test(name);
  }

  document.getElementById('addAddressForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData);

    // Validate name
    if (!validateName(data.name)) {
        notyf.error('Name should contain only letters and spaces, and be between 3-50 characters');
        return;
    }

    // Validate phone
    if (!validatePhone(data.phone)) {
        notyf.error('Please enter a valid 10-digit phone number');
        return;
    }

    // Validate pin code
    if (!validatePinCode(data.pinCode)) {
        notyf.error('Please enter a valid 6-digit pin code');
        return;
    }

    // Validate address line 1
    if (data.addressLine1.trim().length < 5) {
        notyf.error('Address Line 1 should be at least 5 characters long');
        return;
    }

    // Validate city
    if (!validateName(data.city)) {
        notyf.error('City name should contain only letters and spaces');
        return;
    }

    // Validate state
    if (!validateName(data.state)) {
        notyf.error('State name should contain only letters and spaces');
        return;
    }

    // Validate country
    if (!validateName(data.country)) {
        notyf.error('Country name should contain only letters and spaces');
        return;
    }

    try {
        const response = await fetch('/user/address', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        const result = await response.json();

        if (response.ok) {
            notyf.success('Address added successfully');
            // Add delay before closing modal and reloading
            setTimeout(() => {
                closeAddressModal();
                location.reload();
            }, 1000); // Wait for 1 second to show the success message
        } else {
            notyf.error(result.message || 'Failed to add address');
        }
    } catch (error) {
        notyf.error('Something went wrong. Please try again.');
    }
  });

  document.querySelectorAll('[data-modal-close="addAddressModal"]').forEach(button => {
    button.addEventListener('click', closeAddressModal);
  });

  document.getElementById('addAddressModal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeAddressModal();
    }
  });

 

  async function applyCoupon() {
    const couponCode = document.getElementById('coupon-code').value;
    if (!couponCode) {
        notyf.error('Please select a coupon');
        return;
    }

    const subtotalAmount = {{total}};

    try {
        const response = await fetch('/user/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                couponCode: couponCode,
                total: subtotalAmount
            })
        });

        const result = await response.json();

        if (result.status) {
            document.getElementById('discount-row').classList.remove('hidden');
            document.getElementById('discount-amount').textContent = `Rs. ${result.discount}`;
            document.getElementById('final-total').textContent = `Rs. ${result.finalTotal}`;
            updateCODAvailability();
            notyf.success(result.message);
        } else {
            notyf.error(result.message);
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        notyf.error('Error applying coupon');
    }
  }

  function updateCODAvailability() {
    const finalTotalElement = document.getElementById('final-total');
    const finalTotal = parseFloat(finalTotalElement.textContent.replace('Rs. ', ''));
    const codRadio = document.querySelector('input[value="COD"]');
    const codLabel = codRadio.parentElement;
    const codMessage = document.getElementById('cod-message');

    if (finalTotal > 1000) {
        codRadio.disabled = true;
        codLabel.classList.add('opacity-50');
        codMessage.classList.remove('hidden');
        if (codRadio.checked) {
            codRadio.checked = false;
        }
    } else {
        codRadio.disabled = false;
        codLabel.classList.remove('opacity-50');
        codMessage.classList.add('hidden');
    }
  }

  // Call this function initially and whenever the total changes
  updateCODAvailability();
  </script>
</body>
</html>
