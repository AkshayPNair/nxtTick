<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile Page</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/notyf/notyf.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf/notyf.min.css">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Inter:wght@400;500;600&display=swap');
    
    body {
      font-family: 'Inter', sans-serif;
    }


    .profile-heading {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
    }

    .form-label {
      font-family: 'Inter', sans-serif;
      font-weight: 500;
    }
  </style>
</head>
<body class="bg-gray-50 font-['Inter']">
  {{>header}}
  <div class="flex flex-col md:flex-row h-screen ">
    
    <!-- Updated Sidebar -->
    {{>profilebar}}

    <!-- Profile Content -->
    <div class="flex-1 p-8 ">
      <h1 class="text-3xl font-bold mb-8 profile-heading bg-clip-text text-black">My Profile</h1>
      <div class="flex items-center space-x-6 mb-8 p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300">
        <div class="relative group">
          <img id="profile-image" src="{{#if user.profileImage}}{{user.profileImage}}{{else}}https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png{{/if}}" 
               alt="Profile" 
               class="rounded-full w-24 h-24 object-cover ring-4 ring-blue-100 transition-transform duration-300 group-hover:scale-105">
          <label for="profile-image-upload" 
                 class="absolute bottom-0 right-0 bg-blue-600 text-white rounded-full p-2 cursor-pointer hover:bg-blue-700 transform transition-all duration-300 hover:scale-110 shadow-lg">
            <input type="file" class="hidden" name="profileImage" id="profile-image-upload" accept="image/*">
            <span class="text-sm">&#9998;</span>
          </label>
        </div>
        <div class="space-y-1">
          <h2 class="text-xl font-bold text-gray-800">{{user.name}}</h2>
          <p class="text-sm text-gray-500 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            {{user.email}}
          </p>
        </div>
      </div>

      <!-- Form -->
      <form class="bg-white rounded-xl shadow-lg p-8 space-y-8" id="profile-form" action="/user/updateProfile" method="POST" enctype="multipart/form-data">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700">Name</label>
            <div class="relative">
              <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                </svg>
              </span>
              <input type="text" 
                     placeholder="Enter your name" 
                     name="name" 
                     value="{{user.name}}" 
                     class="pl-10 w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200">
            </div>
          </div>

          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700" for="gender">Gender</label>
            <div class="relative">
              <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </span>
              <select class="pl-10 w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 appearance-none bg-white" name="gender">
                <option value="">Select a gender</option>
                <option value="male" {{#if (eq user.gender "male")}}selected{{/if}}>Male</option>
                <option value="female" {{#if (eq user.gender "female")}}selected{{/if}}>Female</option>
                <option value="other" {{#if (eq user.gender "other")}}selected{{/if}}>Other</option>
              </select>
              <span class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none text-gray-500">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </span>
            </div>
          </div>

          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700" for="email">Email</label>
            <div class="relative">
              <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
              </span>
              <input type="email" 
                     name="email" 
                     placeholder="Your email address" 
                     value="{{user.email}}" 
                     class="pl-10 w-full border border-gray-300 rounded-lg p-3 bg-gray-50 cursor-not-allowed" 
                     readonly>
            </div>
          </div>
        </div>

        <div style="display: none;">
          <input type="hidden" name="croppedImage" id="cropped-image-input">
        </div>

        <div class="pt-6 space-y-4">
          <button type="submit" 
                  class="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 rounded-lg hover:from-blue-700 hover:to-blue-800 transform hover:scale-[1.02] transition-all duration-200 shadow-lg hover:shadow-blue-500/30">
            Save Changes
          </button>
          
          {{#if user.googleId}}
          {{else}}
          <button type="button" 
                  id="reset-password-btn" 
                  class="w-full bg-gradient-to-r from-green-500 to-green-600 text-white py-3 rounded-lg hover:from-green-600 hover:to-green-700 transform hover:scale-[1.02] transition-all duration-200 shadow-lg hover:shadow-green-500/30 flex items-center justify-center space-x-3">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
            </svg>
            <span>Reset Password</span>
          </button>
          {{/if}}
        </div>
      </form>
    </div>
  </div>

  <!-- Cropper Modal -->
  <div id="cropper-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden z-50">
    <div class="bg-white p-6 rounded-lg">
      <div class="w-96 h-96">
        <img id="cropper-image" src="" class="max-w-full max-h-full">
      </div>
      <div class="flex justify-end mt-4 space-x-2">
        <button id="crop-btn" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Save</button>
        <button id="cancel-btn" class="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Password Reset Modal -->
  <div id="password-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden z-50">
    <div class="bg-white p-6 rounded-lg w-96 shadow-2xl">
      <h3 class="text-2xl font-semibold mb-6 text-center text-gray-800">Reset Password</h3>
      <form id="password-form" class="space-y-6">
        <div class="relative">
          <label class="block text-sm font-medium text-gray-700 mb-2">Current Password</label>
          <div class="relative">
            <input type="password" id="currentPassword" name="currentPassword" class="w-full border rounded-lg p-3 pr-10 focus:outline-none focus:ring-2 focus:ring-green-500 transition duration-200">
            <button type="button" class="toggle-password absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700">
              <i class="fas fa-eye"></i>
            </button>
          </div>
        </div>
        <div class="relative">
          <label class="block text-sm font-medium text-gray-700 mb-2">New Password</label>
          <div class="relative">
            <input type="password" id="newPassword" name="newPassword" class="w-full border rounded-lg p-3 pr-10 focus:outline-none focus:ring-2 focus:ring-green-500 transition duration-200">
            <button type="button" class="toggle-password absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700">
              <i class="fas fa-eye"></i>
            </button>
          </div>
        </div>
        <div class="relative">
          <label class="block text-sm font-medium text-gray-700 mb-2">Confirm Password</label>
          <div class="relative">
            <input type="password" id="confirmPassword" name="confirmPassword" class="w-full border rounded-lg p-3 pr-10 focus:outline-none focus:ring-2 focus:ring-green-500 transition duration-200">
            <button type="button" class="toggle-password absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700">
              <i class="fas fa-eye"></i>
            </button>
          </div>
        </div>
        <div class="flex justify-end space-x-3 mt-6">
          <button type="button" id="close-password-modal" class="px-6 py-2.5 rounded-lg bg-gray-200 text-gray-700 hover:bg-gray-300 transition duration-200">Cancel</button>
          <button type="submit" class="px-6 py-2.5 rounded-lg bg-green-600 text-white hover:bg-green-700 transition duration-200">Update Password</button>
        </div>
      </form>
    </div>
  </div>

  {{>profileFooter}}
  <script>
    const profileImageUpload = document.getElementById('profile-image-upload');
    const profileImage = document.getElementById('profile-image');
    const cropperModal = document.getElementById('cropper-modal');
    const cropperImage = document.getElementById('cropper-image');
    const cropBtn = document.getElementById('crop-btn');
    const cancelBtn = document.getElementById('cancel-btn');
    const croppedImageInput = document.getElementById('cropped-image-input');
    let cropper;

    profileImageUpload.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          cropperImage.src = e.target.result;
          cropperModal.classList.remove('hidden');
          
          if (cropper) {
            cropper.destroy();
          }
          
          cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 1,
            dragMode: 'move',
            autoCropArea: 1,
            restore: false,
            guides: true,
            center: true,
            highlight: false,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
          });
        };
        reader.readAsDataURL(file);
      }
    });

    cropBtn.addEventListener('click', function() {
      if (!cropper) return;
      
      const canvas = cropper.getCroppedCanvas({
        width: 300,
        height: 300,
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high',
      });

      const croppedDataUrl = canvas.toDataURL('image/jpeg', 0.8);
      profileImage.src = croppedDataUrl;
      croppedImageInput.value = croppedDataUrl;
      
      cropper.destroy();
      cropper = null;
      cropperModal.classList.add('hidden');
    });

    cancelBtn.addEventListener('click', function() {
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      cropperModal.classList.add('hidden');
      profileImageUpload.value = '';
    });

    // Password Reset Modal Functionality
    const resetPasswordBtn = document.getElementById('reset-password-btn');
    const passwordModal = document.getElementById('password-modal');
    const closePasswordModal = document.getElementById('close-password-modal');
    const togglePasswordBtns = document.querySelectorAll('.toggle-password');
    const passwordForm = document.getElementById('password-form');

    resetPasswordBtn.addEventListener('click', function() {
      passwordModal.classList.remove('hidden');
    });

    closePasswordModal.addEventListener('click', function() {
      passwordModal.classList.add('hidden');
      passwordForm.reset();
    });

    togglePasswordBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const input = this.parentElement.querySelector('input');
        const icon = this.querySelector('i');
        
        if (input.type === 'password') {
          input.type = 'text';
          icon.classList.remove('fa-eye');
          icon.classList.add('fa-eye-slash');
        } else {
          input.type = 'password';
          icon.classList.remove('fa-eye-slash');
          icon.classList.add('fa-eye');
        }
      });
    });

    passwordForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const currentPassword = document.getElementById('currentPassword').value;
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;

      if (newPassword !== confirmPassword) {
        notyf.error('Password do not match!');
        return;
      }

      
      fetch('/user/resetPassword', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          currentPassword,
          newPassword
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status) {
          notyf.success(data.message);
          passwordModal.classList.add('hidden');
          passwordForm.reset();
        } else {
          notyf.error(data.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        notyf.error('An error occurred while resetting password');
      });
    });

    const notyf = new Notyf({
    duration: 3000, // Duration of the notification
    position: {
      x: 'right', // Notify position (right or left)
      y: 'top', // Notify position (top or bottom)
    },
    types: [
      {
        type: 'success',
        background: 'green',
        duration: 3000,
      },
      {
        type: 'error',
        background: 'red',
        duration: 3000,
      },
      {
        type: 'info',
        background: 'blue',
        duration:3000,
      },
    ],
  });
  </script>
</body>
</html>
