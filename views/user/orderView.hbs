<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.31/jspdf.plugin.autotable.min.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Inter:wght@400;500;600&display=swap');
    
    body {
      font-family: 'Inter', sans-serif;
    }
    
 

    .section-heading {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
    }

    .product-name {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
    }

    .tracking-stage {
      font-family: 'Inter', sans-serif;
      font-weight: 500;
    }

    @keyframes glow {
      0% { box-shadow: 0 0 5px rgba(59, 130, 246, 0.5); }
      50% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.8); }
      100% { box-shadow: 0 0 5px rgba(59, 130, 246, 0.5); }
    }
  </style>
</head>
<body class="bg-gray-50 font-['Inter']">
    {{>header}}
    <div class="w-full min-h-screen bg-gray-100 py-12">
        <div class="max-w-6xl mx-auto p-10 bg-white shadow rounded-lg">
            <!-- Order Summary Section -->
            <div class="mb-12">
                <h2 class="text-2xl font-semibold mb-8 section-heading">Order Summary</h2>
                
                <div class="grid grid-cols-12 gap-8 items-start">
                    {{#each order.items}}  
                    <div class="col-span-2 flex justify-center">
                        <img src="{{product.images.[0]}}" 
                             alt="{{product.name}}" 
                             class="w-32 h-32 rounded-xl shadow-lg hover:shadow-xl object-cover border-2 border-gray-100">
                    </div>
                    <div class="col-span-8">
                        <h3 class="text-xl product-name">{{product.name}}</h3>
                        <div class="mt-4 flex items-center gap-3">
                            <span class="text-gray-500 font-medium">Price:</span>
                            {{#if this.activeOffer}}
                            <div class="flex items-center gap-2">
                                <span class="text-lg font-bold bg-gradient-to-r from-red-600 to-red-500 bg-clip-text text-transparent">₹{{this.finalPrice}}</span>
                                <span class="text-gray-400 line-through text-sm">₹{{this.originalPrice}}</span>
                                <span class="bg-gradient-to-r from-green-500 to-emerald-500 text-white text-xs px-3 py-1 rounded-full font-medium shadow-sm">{{this.activeOffer.discountValue}}% OFF</span>
                            </div>
                            {{else}}
                            <span class="text-lg font-bold bg-gradient-to-r from-red-600 to-red-500 bg-clip-text text-transparent">₹{{this.originalPrice}}</span>
                            {{/if}}
                        </div>
                        <div class="flex items-center gap-2 mt-2">
                            <span class="text-gray-500">Quantity:</span>
                            <span class="font-medium text-gray-800">{{quantity}}</span>
                        </div>
                    </div><br>
                    {{/each}} 
                </div> 
            </div>

            <!-- Shipping Address Section -->
            <div class="mb-12 ">
                <h2 class="text-2xl font-semibold mb-8 section-heading flex items-center gap-3">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    Shipping Address
                </h2>
                <div class="p-6 bg-white rounded-lg shadow-md border hover:shadow-lg border-gray-100">
                    <div class="flex items-center gap-3 mb-4">
                        <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                        </div>
                        <p class="text-xl text-gray-800 font-bold">{{order.address.name}}</p>
                    </div>
                    <div class="space-y-3 pl-12">
                        <div class="flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                            </svg>
                            <p class="text-gray-700">{{order.address.addressLine1}} , {{order.address.addressLine2}}</p>
                        </div>
                        <div class="flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                            </svg>
                            <p class="text-gray-700">{{order.address.city}}, {{order.address.state}}, {{order.address.pinCode}}</p>
                        </div>
                        <div class="flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 21v-4m0 0V5a2 2 0 012-2h6.5l1 1H21l-3 6 3 6h-8.5l-1-1H5a2 2 0 00-2 2zm9-13.5V9" />
                            </svg>
                            <p class="text-gray-700">{{order.address.country}}</p>
                        </div>
                        <div class="flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                            </svg>
                            <p class="text-gray-700">{{order.address.phone}}</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Tracking Section -->
            <div class="mb-12">
                <h2 class="text-2xl font-semibold mb-8 section-heading">Order Tracking</h2>
                <div class="relative px-8">
                    <!-- Progress Line -->
                    <div class="absolute top-1/2 left-0 right-0 h-1 bg-gradient-to-r from-gray-200 via-gray-200 to-gray-200 rounded-full">
                        <div id="progress-line" class="absolute top-0 left-0 h-full rounded-full transition-all duration-1000 animate-pulse shadow-lg"></div>
                    </div>

                    <div class="flex justify-between items-center relative z-10">
                        <!-- Pending -->
                        <div class="flex flex-col items-center transform transition-all duration-500 hover:scale-110">
                            <div id="pending-stage" class="w-10 h-10 rounded-full border-4 border-gray-300 bg-white shadow-lg flex items-center justify-center transition-all duration-300">
                                <svg class="w-5 h-5 text-gray-400 transform transition-transform duration-500 hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                            </div>
                            <span class="mt-3 font-medium text-gray-500 transition-colors duration-300">Pending</span>
                            <span id="pending-date" class="text-sm text-gray-500">{{formatDate order.createdAt}}</span>
                        </div>

                        <!-- Shipped -->
                        <div class="flex flex-col items-center transform transition-all duration-500 hover:scale-110">
                            <div id="shipped-stage" class="w-10 h-10 rounded-full border-4 border-gray-300 bg-white shadow-lg flex items-center justify-center transition-all duration-300">
                                <svg class="w-5 h-5 text-gray-400 transform transition-transform duration-500 hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                            </div>
                            <span class="mt-3 font-medium text-gray-500 transition-colors duration-300">Shipped</span>
                            <span id="shipped-date" class="text-sm text-gray-500">
                                {{#if order.shippedAt}}
                                    {{formatDate order.shippedAt}}
                                {{else}}
                                    --
                                {{/if}}
                            </span>
                        </div>

                        <!-- Out for Delivery -->
                        <div class="flex flex-col items-center transform transition-all duration-500 hover:scale-110">
                            <div id="out-for-delivery-stage" class="w-10 h-10 rounded-full border-4 border-gray-300 bg-white shadow-lg flex items-center justify-center transition-all duration-300">
                                <svg class="w-5 h-5 text-gray-400 transform transition-transform duration-500 hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                                </svg>
                            </div>
                            <span class="mt-3 font-medium text-gray-500 transition-colors duration-300">Out for Delivery</span>
                            <span id="out-for-delivery-date" class="text-sm text-gray-500">
                                {{#if order.outForDeliveryAt}}
                                    {{formatDate order.outForDeliveryAt}}
                                {{else}}
                                    --
                                {{/if}}
                            </span>
                        </div>

                        <!-- Delivered/Cancelled/Returned -->
                        <div class="flex flex-col items-center transform transition-all duration-500 hover:scale-110">
                            <div id="final-stage" class="w-10 h-10 rounded-full border-4 border-gray-300 bg-white shadow-lg flex items-center justify-center transition-all duration-300">
                                <svg class="w-5 h-5 text-gray-400 transform transition-transform duration-500 hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                            </div>
                            <span id="final-stage-text" class="mt-3 font-medium text-gray-500 transition-colors duration-300">
                                {{#if (eq order.status "Cancelled")}}
                                    Cancelled
                                {{else if (eq order.status "Returned")}}
                                    Returned
                                {{else}}
                                    Delivered
                                {{/if}}
                            </span>
                            <span id="final-stage-date" class="text-sm text-gray-500">
                                {{#if (eq order.status "Cancelled")}}
                                    {{formatDate order.cancelledAt}}
                                {{else if (eq order.status "Returned")}}
                                    {{formatDate order.returnedAt}}
                                {{else}}
                                    {{#if order.deliveredAt}}
                                        {{formatDate order.deliveredAt}}
                                    {{else}}
                                        --
                                    {{/if}}
                                {{/if}}
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Details Section -->
            <div class="mb-8">
                <h2 class="text-2xl font-semibold mb-4 section-heading text-black">Order Details</h2>
                <div class="text-base text-black space-y-2">
                    <p class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <span class="font-semibold">Order Date:</span>
                        <span>{{formatDate order.createdAt}}</span>
                    </p>
                    <p class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2z" />
                        </svg>
                        <span class="font-semibold">Payment Method:</span>
                        <span class="capitalize">{{order.paymentMethod}}</span>
                    </p>
                    <p class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14" />
                        </svg>
                        <span class="font-semibold">Order ID:</span>
                        <span class="font-mono">{{order._id}}</span>
                    </p>
                </div>

                <!-- Download Invoice Button -->
                <div class="mt-4">
                    <button onclick="downloadInvoice('{{order._id}}')" 
                            class="group px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white text-sm font-semibold rounded hover:from-blue-700 hover:to-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-400 transform hover:scale-[1.02] transition-all duration-200 flex items-center gap-2">
                        <svg class="w-4 h-4 transform group-hover:-translate-y-0.5 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        Download Invoice
                    </button>
                </div>
            </div>

            <!-- Cancel/Return Order Button -->
            <div class="mt-6 flex justify-center">
                {{#if order.deliveredAt}}
                    {{#if (eq order.status "Returned")}}
                    {{else}}
                        <button onclick="confirmReturnOrder('{{order._id}}')" 
                                class="group px-5 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white text-base font-semibold rounded-lg shadow-lg hover:from-red-600 hover:to-red-700 transform hover:scale-[1.02] transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-2 flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transform group-hover:-translate-x-1 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                            </svg>
                            Return Order
                        </button>
                    {{/if}}
                {{else}}
                    {{#if (eq order.status "Cancelled")}}
                    {{else}}
                        <button onclick="confirmCancelOrder('{{order._id}}')"
                                class="group px-5 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white text-base font-semibold rounded-lg shadow-lg hover:from-red-600 hover:to-red-700 transform hover:scale-[1.02] transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-2 flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transform group-hover:rotate-12 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                            Cancel Order
                        </button>
                    {{/if}}
                {{/if}}
            </div>
        </div>
    </div>

    <script>
        function updateProgressBar(status) {
            const stages = [
                document.getElementById('pending-stage'),
                document.getElementById('shipped-stage'),
                document.getElementById('out-for-delivery-stage'),
                document.getElementById('final-stage')
            ];
            const progressLine = document.getElementById('progress-line');

            // Reset all stages
            stages.forEach(stage => {
                stage.classList.remove('border-blue-500', 'bg-blue-500', 'border-yellow-500', 'bg-yellow-500', 'border-green-500', 'bg-green-500', 'border-red-500', 'bg-red-500', 'animate-pulse');
                stage.classList.add('border-gray-300', 'bg-white');
                stage.querySelector('svg').classList.replace('text-white', 'text-gray-400');
            });

            switch(status) {
                case 'Pending':
                    stages[0].classList.remove('border-gray-300', 'bg-white');
                    stages[0].classList.add('border-blue-500', 'bg-blue-500', 'animate-pulse');
                    stages[0].querySelector('svg').classList.replace('text-gray-400', 'text-white');
                    progressLine.style.width = '25%';
                    progressLine.className = 'absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 to-gray-300 rounded-full transition-all duration-1000 animate-pulse shadow-[0_0_10px_rgba(59,130,246,0.5)]';
                    break;

                case 'Shipped':
                    for(let i = 0; i <= 1; i++) {
                        stages[i].classList.remove('border-gray-300', 'bg-white');
                        stages[i].classList.add('border-blue-500', 'bg-blue-500', 'animate-pulse');
                        stages[i].querySelector('svg').classList.replace('text-gray-400', 'text-white');
                    }
                    progressLine.style.width = '50%';
                    progressLine.className = 'absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 via-blue-500 to-gray-300 rounded-full transition-all duration-1000 animate-pulse shadow-[0_0_15px_rgba(59,130,246,0.6)]';
                    break;

                case 'Out for Delivery':
                    for(let i = 0; i <= 2; i++) {
                        stages[i].classList.remove('border-gray-300', 'bg-white');
                        if(i === 2) {
                            stages[i].classList.add('border-yellow-500', 'bg-yellow-500', 'animate-pulse');
                        } else {
                            stages[i].classList.add('border-blue-500', 'bg-blue-500', 'animate-pulse');
                        }
                        stages[i].querySelector('svg').classList.replace('text-gray-400', 'text-white');
                    }
                    progressLine.style.width = '75%';
                    progressLine.className = 'absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 via-yellow-500 to-gray-300 rounded-full transition-all duration-1000 animate-pulse shadow-[0_0_20px_rgba(234,179,8,0.6)]';
                    break;

                case 'Delivered':
                    stages.forEach((stage, index) => {
                        stage.classList.remove('border-gray-300', 'bg-white');
                        if(index === 3) {
                            stage.classList.add('border-green-500', 'bg-green-500', 'animate-pulse');
                        } else if(index === 2) {
                            stage.classList.add('border-yellow-500', 'bg-yellow-500', 'animate-pulse');
                        } else {
                            stage.classList.add('border-blue-500', 'bg-blue-500', 'animate-pulse');
                        }
                        stage.querySelector('svg').classList.replace('text-gray-400', 'text-white');
                    });
                    progressLine.style.width = '100%';
                    progressLine.className = 'absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 via-yellow-500 to-green-500 rounded-full transition-all duration-1000 animate-pulse shadow-[0_0_25px_rgba(34,197,94,0.6)]';
                    break;

                case 'Cancelled':
                    // Show only first stage in blue, final stage in red
                    stages[0].classList.remove('border-gray-300', 'bg-white');
                    stages[0].classList.add('border-blue-500', 'bg-blue-500', 'animate-pulse');
                    stages[0].querySelector('svg').classList.replace('text-gray-400', 'text-white');

                    stages[3].classList.remove('border-gray-300', 'bg-white');
                    stages[3].classList.add('border-red-500', 'bg-red-500', 'animate-pulse');
                    stages[3].querySelector('svg').classList.replace('text-gray-400', 'text-white');

                    progressLine.style.width = '100%';
                    progressLine.className = 'absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 to-red-500 rounded-full transition-all duration-1000 animate-pulse shadow-[0_0_25px_rgba(239,68,68,0.6)]';
                    break;

                case 'Returned':
                    // Show all stages completed but final stage in red
                    stages.forEach((stage, index) => {
                        stage.classList.remove('border-gray-300', 'bg-white');
                        if(index === 3) {
                            stage.classList.add('border-red-500', 'bg-red-500', 'animate-pulse');
                        } else {
                            stage.classList.add('border-blue-500', 'bg-blue-500', 'animate-pulse');
                        }
                        stage.querySelector('svg').classList.replace('text-gray-400', 'text-white');
                    });
                    progressLine.style.width = '100%';
                    progressLine.className = 'absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 via-blue-500 to-red-500 rounded-full transition-all duration-1000 animate-pulse shadow-[0_0_25px_rgba(239,68,68,0.6)]';
                    break;
            }
        }

        // Initialize progress bar on page load
        window.onload = function() {
            const status = '{{order.status}}';
            updateProgressBar(status);
        }

        function confirmCancelOrder(orderId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You want to cancel this order?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#EF4444', 
                cancelButtonColor: '#6B7280',
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it'
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Cancel Reason',
                        input: 'textarea',
                        inputLabel: 'Please provide a reason for Cancelling',
                        inputPlaceholder: 'Enter your reason here...',
                        inputAttributes: {
                            'aria-label': 'Cancel reason'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Submit',
                        showLoaderOnConfirm: true,
                        preConfirm: (reason) => {
                            if (!reason) {
                                Swal.showValidationMessage('Please enter a reason')
                            }
                            return reason;
                        }
                    }).then((result)=>{
                        if(result.isConfirmed){
                            fetch(`/user/cancelOrder/${orderId}`)
                            .then(response => {
                                if(response.ok) {
                                    Swal.fire({
                                        title: 'Order Cancelled!',
                                        text: 'Your order has been cancelled successfully',
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        window.location.href = '/user/orders';
                                    });
                                }
                            })
                            .catch(() => {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Failed to cancel order',
                                    icon: 'error'
                                });
                            });
                        }
                    })            
                }
            });
        }

        function confirmReturnOrder(orderId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to return this order?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#EF4444',
                cancelButtonColor: '#6B7280', 
                confirmButtonText: 'Yes, return it!',
                cancelButtonText: 'No, keep it'
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Return Reason',
                        input: 'textarea',
                        inputLabel: 'Please provide a reason for returning',
                        inputPlaceholder: 'Enter your reason here...',
                        inputAttributes: {
                            'aria-label': 'Return reason'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Submit',
                        showLoaderOnConfirm: true,
                        preConfirm: (reason) => {
                            if (!reason) {
                                Swal.showValidationMessage('Please enter a reason')
                            }
                            return reason;
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/user/returnOrder/${orderId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    reason: result.value
                                })
                            })
                            .then(response => {
                                if(response.ok) {
                                    Swal.fire({
                                        title: 'Return Confirmed!',
                                        text: 'Your return  has been submitted successfully',
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        window.location.href = '/user/orders';
                                    });
                                } else {
                                    throw new Error('Return failed');
                                }
                            })
                            .catch(() => {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Failed to process return request',
                                    icon: 'error'
                                });
                            });
                        }
                    });
                }
            });
        }

        function downloadInvoice(orderId) {
            // Create new jsPDF instance
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Add company logo/header
            doc.setFontSize(24);
            doc.setTextColor(41, 128, 185); // Blue color
            doc.text('nxtTick', 105, 20, { align: 'center' });
            
            // Add decorative line
            doc.setDrawColor(41, 128, 185);
            doc.setLineWidth(0.5);
            doc.line(20, 25, 190, 25);

            // Add invoice title
            doc.setFontSize(20);
            doc.setTextColor(0, 0, 0);
            doc.text('INVOICE', 105, 40, { align: 'center' });
            
            // Add order details in a styled box
            doc.setFillColor(240, 240, 240);
            doc.rect(15, 45, 180, 25, 'F');
            doc.setFontSize(12);
            doc.text(`Order ID: ${orderId}`, 20, 55);
            doc.text(`Date: ${new Date('{{order.createdAt}}').toLocaleDateString()}`, 20, 65);
            
            // Add customer details in a styled box
            doc.setFillColor(240, 240, 240); 
            doc.rect(15, 80, 180, 40, 'F'); 
            doc.setFontSize(14);
            doc.setTextColor(41, 128, 185);
            doc.text('Ship To:', 20, 90);
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);
            doc.text('{{order.address.name}}', 20, 100);
            doc.text('{{order.address.street}}', 20, 105);
            doc.text('{{order.address.city}}, {{order.address.state}}, {{order.address.pinCode}}', 20, 105);
            doc.text('{{order.address.country}}', 20, 110);
            doc.text('Phone: {{order.address.phone}}', 20, 115);
            
            // Prepare items data for table with enhanced styling
            const items = [
                {{#each order.items}}
                    [
                        '{{product.name}}',
                        '{{quantity}}',
                        {{#if this.activeOffer}}
                            '₹{{originalPrice}}',
                            '{{this.activeOffer.discountValue}}% OFF',
                            '₹{{finalPrice}}'
                        {{else if ../couponUsed}}
                            '₹{{originalPrice}}',
                            'COUPON APPLIED',
                            '₹{{finalPrice}}'
                        {{else}}
                            '₹{{originalPrice}}',
                            'NO DISCOUNT',
                            '₹{{originalPrice}}'
                        {{/if}}
                    ],
                {{/each}}
            ];
            
            // Add items table with enhanced styling
            doc.autoTable({
                startY: 130,
                head: [['Item', 'Quantity', 'Original Price', 'Discount', 'Final Price']],
                body: items,
                theme: 'striped',
                headStyles: { 
                    fillColor: [41, 128, 185],
                    textColor: 255,
                    fontSize: 12,
                    fontStyle: 'bold'
                },
                styles: { 
                    fontSize: 10,
                    cellPadding: 5
                },
                alternateRowStyles: {
                    fillColor: [245, 245, 245]
                }
            });
            
            // Add total amount and payment details
            const finalY = doc.lastAutoTable.finalY + 10;
            doc.setFontSize(12);
            doc.text(`Payment Method: {{order.paymentMethod}}`, 20, finalY);
            
            
            // Add footer with styling
            doc.setDrawColor(41, 128, 185);
            doc.setLineWidth(0.5);
            doc.line(20, 270, 190, 270);
            
            doc.setFontSize(10);
            doc.setTextColor(128, 128, 128);
            doc.text('Thank you for shopping with nxtTick!', 105, 280, { align: 'center' });
            doc.text('Visit us again at www.nxtTick.com', 105, 285, { align: 'center' });
            
            // Save the PDF
            doc.save(`nxtTick-Invoice-${orderId}.pdf`);
        }
    </script>
</body>
</html>