<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification Page</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-white-100">
    <!-- Navbar -->
    <header class="flex justify-between items-center px-6 py-4 bg-white shadow">
        <div class="mx-10 flex items-center space-x-2">
            <img src="/images/logo nxtTick.png" alt="Logo" style="width: 130px; height: 30px;"> 
        </div>
        <div>
            <a href="/user/login" class="px-4 py-2 font-semibold text-gray-700 hover:text-gray-900 border-2 border-gray-200 rounded-xl hover:bg-gray-200">Login</a>
            <a href="/user/signup" class="px-4 py-2 ml-2 font-semibold text-white bg-blue-600 rounded-xl hover:bg-blue-700">Sign Up</a>
        </div>
    </header>

    <!-- Main Content -->
    <div class="flex flex-col-reverse lg:flex-row items-center justify-center min-h-screen p-6">
        <!-- Image Section -->
        <div class="w-full lg:w-[60%] p-4">
            <img src="/images/otp img.jpg" alt="OTP Verification Image" class="w-[500px] h-[400px] rounded-lg mx-auto">
        </div>

        <!-- OTP Verification Form Section -->
        <div class="w-full lg:w-[35%] max-w-md bg-white p-8 ">
            <h2 class="text-3xl font-bold text-gray-800 mb-6">OTP Verification</h2>
            <p class="text-lg text-blue-600 mb-4">Enter OTP</p>
            <form class="space-y-5" id="otpForm">
                <div class="flex justify-between space-x-2">
                    <!-- OTP Input Boxes -->
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric" class="w-16 h-16 text-center text-xl border rounded-2xl bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500" id="otp1" required>
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric" class="w-16 h-16 text-center text-xl border rounded-2xl bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500" id="otp2" required>
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric" class="w-16 h-16 text-center text-xl border rounded-2xl bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500" id="otp3" required>
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric" class="w-16 h-16 text-center text-xl border rounded-2xl bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500" id="otp4" required>
                </div>
                <button type="submit" class="w-full py-2 mt-4 text-white bg-blue-600 rounded-2xl hover:bg-blue-700 transition duration-300">Verify OTP</button>
            </form>
            <div class="flex justify-between items-center mt-4">
                <button id="resendOtp" class="text-sm text-gray-600 hover:underline focus:outline-none">Resend OTP</button>
                <span id="timer" class="text-sm text-gray-600">60s</span>
            </div>
        </div>
    </div>
    
    <script>
    document.addEventListener("DOMContentLoaded", () => {
        // Extract email from URL query parameters
        const urlParams = new URLSearchParams(window.location.search);
        const email = urlParams.get("email");

        if (!email) {
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: "Email not found! Please restart the password reset process."
            }).then(() => {
                window.location.href = '/user/forgetPasswordEmail';
            });
            return;
        }

        // Auto-focus and input handling for OTP fields
        const otpInputs = Array.from(document.querySelectorAll("#otpForm input[type=text]"));
        otpInputs.forEach((input, index) => {
            input.addEventListener('keyup', (e) => {
                if (e.key >= '0' && e.key <= '9') {
                    if (index < otpInputs.length - 1) {
                        otpInputs[index + 1].focus();
                    }
                } else if (e.key === 'Backspace') {
                    if (index > 0) {
                        otpInputs[index - 1].focus();
                    }
                }
            });
            
            // Allow only numbers
            input.addEventListener('input', (e) => {
                e.target.value = e.target.value.replace(/[^0-9]/g, '');
            });
        });

        // Timer variables
        let timer = 60;
        const timerElement = document.getElementById("timer");
        let timerInterval;

        // Start timer for resend OTP
        const startTimer = () => {
            clearInterval(timerInterval); // Clear any existing interval
            timerInterval = setInterval(() => {
                if (timer > 0) {
                    timer--;
                    timerElement.textContent = `${timer}s`;
                } else {
                    clearInterval(timerInterval);
                    timerElement.textContent = "Resend OTP available";
                }
            }, 1000);
        };

        // Start initial timer
        startTimer();

        // Resend OTP functionality
        document.getElementById("resendOtp").addEventListener("click", async () => {
            if (timer > 0) {
                Swal.fire({
                    icon: "info",
                    title: "Please wait",
                    text: `Please wait ${timer}s before resending OTP.`
                });
                return;
            }

            try {
                const response = await fetch("/user/forgetPasswordEmail", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ email }),
                });

                const data = await response.json();

                if (data.status) {
                    Swal.fire({
                        icon: "success",
                        title: "Success",
                        text: "OTP resent successfully!"
                    });
                    timer = 60;
                    startTimer();
                    // Clear OTP inputs
                    otpInputs.forEach(input => input.value = '');
                    otpInputs[0].focus();
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: data.message || "Failed to resend OTP"
                    });
                }
            } catch (error) {
                console.error("Error resending OTP:", error);
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Failed to resend OTP. Please try again later."
                });
            }
        });

        // OTP Verification form submission
        document.getElementById("otpForm").addEventListener("submit", async (event) => {
            event.preventDefault();

            // Collect OTP from input fields
            const otp = otpInputs.map(input => input.value).join("");

            if (otp.length !== 4 || !/^\d{4}$/.test(otp)) {
                Swal.fire({
                    icon: "error",
                    title: "Invalid OTP",
                    text: "Please enter a valid 4-digit OTP."
                });
                return;
            }

            try {
                const response = await fetch("/user/verifyForgetPassOtp", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ email, otp }),
                });

                const data = await response.json();

                if (data.status) {
                    Swal.fire({
                        icon: "success",
                        title: "Success",
                        text: "OTP verified successfully!",
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = `/user/forgetPassword?email=${email}`;
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: data.message || "Invalid OTP"
                    });
                    // Clear OTP inputs on error
                    otpInputs.forEach(input => input.value = '');
                    otpInputs[0].focus();
                }
            } catch (error) {
                console.error("Error verifying OTP:", error);
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Failed to verify OTP. Please try again later."
                });
            }
        });
    });
    </script>

</body>
</html>
