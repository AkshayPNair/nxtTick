<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- Cropper.js CSS -->
  <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet">
  <!-- Cropper.js JS -->
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>

  
</head>
<body class="bg-gray-100 font-sans text-gray-800 flex flex-col min-h-screen">
  <div class="flex">
    <!-- Sidebar -->
    {{> sideBar}}

    <!-- Main Content -->
    <main class="flex-1 bg-white p-5">
      <!-- Header -->
      <div class="flex items-center justify-between mb-5">
        <h1 class="font-bold text-xl">Product</h1>
        <button class="bg-blue-600 text-white py-2 px-4 rounded-lg">Admin</button>
      </div>

      <!-- Breadcrumbs -->
      <div class="text-sm text-gray-500 mb-5">
        <span>Dashboard</span> > <span>All Products</span> > <span class="text-blue-600">Add Products</span>
      </div>

      <!-- Form Section -->
      <form id="product-images" action="/admin/addProduct" method="POST" enctype="multipart/form-data" onsubmit="event.preventDefault(); validateForm()">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <!-- Form Inputs -->
          <div class="lg:col-span-2 bg-gray-50 p-5 rounded shadow">
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium">Product Name</label>
                <input type="text" id="productName" name="productName" placeholder="Product Name..." class="w-full border p-2 rounded" >
              </div>
              <div>
                <label class="block text-sm font-medium">Description</label>
                <textarea name="description" id="description" placeholder="Product description" class="w-full border p-2 rounded h-24" ></textarea>
              </div>
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium">Category</label>
                  {{!-- <input type="text" name="category" id="category" placeholder="Product category" class="w-full border p-2 rounded" required> --}}
                  <select name="category" id="category" class="w-full border p-2 rounded" >
                    <option value="">Select a Category</option>
                    {{#each categories}}
                    <option value="{{this._id}}">{{this.name}}</option>
                    {{/each}}
                  </select>
                </div>
                <div>
                  <label class="block text-sm font-medium">Brand Name</label>
                  <input type="text" name="brand" id="brand" placeholder="Brand name" class="w-full border p-2 rounded">
                </div>
              </div>
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium">Stock Quantity</label>
                  <input type="number" name="stock" id="stock" placeholder="quantity" class="w-full border p-2 rounded" >
                </div>
                <div>
                  <label class="block text-sm font-medium">Sale Price</label>
                  <input type="number" name="price" id="price" placeholder="sale price" class="w-full border p-2 rounded" >
                </div>
              </div>
            </div>
          </div>

          <!-- Product Gallery -->
          <div class="bg-gray-50 p-5 rounded shadow">
            <div>
              <label class="block text-sm font-medium">Product Gallery</label>
              <div class="space-y-4">
                <!-- Image Upload Option -->
                <div>
                  <input type="file" name="images" id="images1" onchange="previewImage(this)" class="w-full border p-2 rounded" />
                  <input type="file" name="images" id="images2" onchange="previewImage(this)" class="w-full border p-2 rounded mt-2"  />
                  <input type="file" name="images" id="images3" onchange="previewImage(this)" class="w-full border p-2 rounded mt-2"  />
                  <input type="file" name="images" id="images4" onchange="previewImage(this)" class="w-full border p-2 rounded mt-2"  />
                </div>

                <!-- Display Images Below Gallery -->
                <div id="image-gallery" class="flex flex-wrap mt-4">
                  <!-- Images will be appended here -->
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Actions -->
        <div class="flex justify-end gap-4 mt-6">
          <button type="submit" class="bg-green-600 hover:bg-green-500 text-white px-6 py-2 rounded">ADD PRODUCT</button>
          <button type="button" class="bg-red-600 hover:bg-red-500 text-white px-6 py-2 rounded" onclick="resetGallery()">RESET</button>
          <button type="button" class="bg-gray-300 hover:bg-gray-200 px-6 py-2 rounded">CANCEL</button>
        </div>
      </form>
    </main>
  </div>

  <!-- Footer -->
  <footer class="bg-gray-50 text-center py-4">
    <p>2024 <span class="font-bold text-blue-600">nxtTick</span>. All rights reserved</p>
  </footer>

  <script>
  // JavaScript to handle image preview display
  function previewImage(input) {
    const galleryContainer = document.getElementById("image-gallery");
    const file = input.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const imgElement = document.createElement("img");
        imgElement.src = e.target.result;
        imgElement.classList.add("w-20", "h-20", "rounded", "shadow-lg", "mr-2", "mt-2");
        galleryContainer.appendChild(imgElement);
      };
      reader.readAsDataURL(file);
    }
  }

  // JavaScript to reset the gallery
  function resetGallery() {
    document.getElementById("image-gallery").innerHTML = "";
    document.getElementById("product-images").reset();
  }

  // Validate image format when a file is selected
  function validateImageFormat(input) {
    const allowedExtensions = ["jpg", "jpeg", "png", "gif"];
    const file = input.files[0];

    if (file) {
      const fileExtension = file.name.split(".").pop().toLowerCase();
      if (!allowedExtensions.includes(fileExtension)) {
        Swal.fire({
          icon: "error",
          title: "Invalid Image Format",
          text: "This image must be in jpg, jpeg, png format.",
        });

        // Clear the input field to prevent the invalid file from being selected
        input.value = ""; // Reset the input field
      }
    }
  }

  // Validate form data
  function validateForm() {
    const productName = document.getElementById("productName").value.trim();
    const description = document.getElementById("description").value.trim();
    const category = document.getElementById("category").value;
    const stock = document.getElementById("stock").value.trim();
    const price = document.getElementById("price").value.trim();
    const imageInputs = [
      document.getElementById("images1"),
      document.getElementById("images2"),
      document.getElementById("images3"),
      document.getElementById("images4"),
    ];

    // Validate Product Name
    if (productName === "") {
      Swal.fire({
        icon: "error",
        title: "Product Name Required",
        text: "Please provide a product name.",
      });
      return false;
    } else if (productName.length < 4) {
      Swal.fire({
        icon: "error",
        title: "Invalid Product Name",
        text: "Product name must be at least 4 characters long.",
      });
      return false;
    } else if (!/^[A-Za-z\s\(\)\-\-]+$/.test(productName)) {
      Swal.fire({
        icon: "error",
        title: "Invalid Product Name",
        text: "Product name must contain only alphabets.",
      });
      return false;
    }

    // Validate Description
    if (description === "") {
      Swal.fire({
        icon: "error",
        title: "Description Required",
        text: "Please provide a description for the product.",
      });
      return false;
    }

    // Validate Category
    if (category === "") {
      Swal.fire({
        icon: "error",
        title: "Category Required",
        text: "Please select a product category.",
      });
      return false;
    }

    // Validate Stock
    if (stock === "") {
      Swal.fire({
        icon: "error",
        title: "Stock Required",
        text: "Please provide the stock quantity.",
      });
      return false;
    } else if (stock <= 0 || !Number.isInteger(+stock)) {
      Swal.fire({
        icon: "error",
        title: "Invalid Stock",
        text: "Stock must be a positive integer.",
      });
      return false;
    }

    // Validate Price
    if (price === "") {
      Swal.fire({
        icon: "error",
        title: "Price Required",
        text: "Please provide the price of the product.",
      });
      return false;
    } else if (price <= 0 || !Number.isInteger(+price)) {
      Swal.fire({
        icon: "error",
        title: "Invalid Price",
        text: "Price must be a positive integer.",
      });
      return false;
    }

    // Validate Images
    for (let i = 0; i < imageInputs.length; i++) {
      const file = imageInputs[i].files[0];
      if (!file) {
        Swal.fire({
          icon: "error",
          title: "Missing Image",
          text: `Please upload image ${i + 1}.`,
        });
        return false;
      }
    }

    // If all validations pass
    return true;
  }

  // Event listener for form submission
  document.querySelector("#product-images").addEventListener("submit", async (event) => {
    event.preventDefault();
    if (!validateForm()) return;

    const form = event.target;
    const formData = new FormData(form);

    try {
      const response = await fetch("/admin/addProducts", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();

      if (data.status) {
        Swal.fire({
          icon: "success",
          title: "Success",
          text: data.message,
          confirmButtonText: "OK",
        }).then(() => {
          window.location.href = "/admin/allProducts"; // Redirect after clicking "OK"
        });
      } else {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: data.message || "Something went wrong!",
        });
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "Something went wrong!",
      });
    }
  });

  // Add event listeners for image input fields
  document.getElementById("images1").addEventListener("change", (event) => validateImageFormat(event.target));
  document.getElementById("images2").addEventListener("change", (event) => validateImageFormat(event.target));
  document.getElementById("images3").addEventListener("change", (event) => validateImageFormat(event.target));
  document.getElementById("images4").addEventListener("change", (event) => validateImageFormat(event.target));
</script>

</body>
</html>