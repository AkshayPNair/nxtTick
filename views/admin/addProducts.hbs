<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- Cropper.js CSS -->
  <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet">
  <!-- Cropper.js JS -->
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>

  <style>
    /* Add these styles for the cropper modal */
    .cropper-container {
      max-width: 100%;
    }
    .preview-image {
      width: 100px;
      height: 100px;
      object-fit: cover;
      cursor: pointer;
    }
  </style>
</head>
<body class="bg-gray-100 font-sans text-gray-800 flex flex-col min-h-screen">
  <div class="flex">
    <!-- Sidebar -->
    {{> sideBar}}

    <!-- Main Content -->
    <main class="flex-1 bg-white p-5">
      <!-- Header -->
      <div class="flex items-center justify-between mb-5">
        <h1 class="font-bold text-xl">Product</h1>
        <button class="bg-blue-600 text-white py-2 px-4 rounded-lg">Admin</button>
      </div>

      <!-- Breadcrumbs -->
      <div class="text-sm text-gray-500 mb-5">
        <span>Dashboard</span> > <span>All Products</span> > <span class="text-blue-600">Add Products</span>
      </div>

      <!-- Form Section -->
      <form id="product-images" action="/admin/addProduct" method="POST" enctype="multipart/form-data" onsubmit="event.preventDefault(); validateForm()">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <!-- Form Inputs -->
          <div class="lg:col-span-2 bg-gray-50 p-5 rounded shadow">
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium">Product Name</label>
                <input type="text" id="productName" name="productName" placeholder="Product Name..." class="w-full border p-2 rounded" >
              </div>
              <div>
                <label class="block text-sm font-medium">Description</label>
                <textarea name="description" id="description" placeholder="Product description" class="w-full border p-2 rounded h-24" ></textarea>
              </div>
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium">Category</label>
                  {{!-- <input type="text" name="category" id="category" placeholder="Product category" class="w-full border p-2 rounded" required> --}}
                  <select name="category" id="category" class="w-full border p-2 rounded" >
                    <option value="">Select a Category</option>
                    {{#each categories}}
                    <option value="{{this._id}}">{{this.name}}</option>
                    {{/each}}
                  </select>
                </div>
                <div>
                  <label class="block text-sm font-medium">Brand Name</label>
                  <input type="text" name="brand" id="brand" placeholder="Brand name" class="w-full border p-2 rounded">
                </div>
              </div>
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium">Stock Quantity</label>
                  <input type="number" name="stock" id="stock" placeholder="quantity" class="w-full border p-2 rounded" >
                </div>
                <div>
                  <label class="block text-sm font-medium">Sale Price</label>
                  <input type="number" name="price" id="price" placeholder="sale price" class="w-full border p-2 rounded" >
                </div>
              </div>
            </div>
          </div>

          <!-- Product Gallery -->
          <div class="bg-gray-50 p-5 rounded shadow">
            <div>
              <label class="block text-sm font-medium">Product Gallery</label>
              <div class="space-y-4">
                <!-- Image Upload Option -->
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <input type="file" name="images" id="images1" class="hidden" accept="image/*"/>
                    <div id="preview1" class="w-full h-32 border-2 border-dashed border-gray-300 flex items-center justify-center cursor-pointer">
                      <img class="preview-image hidden" alt="Preview 1">
                      <span class="text-gray-400">Click to upload image 1</span>
                    </div>
                  </div>
                  <!-- Repeat for images 2-4 -->
                  <div>
                    <input type="file" name="images" id="images2" class="hidden" accept="image/*"/>
                    <div id="preview2" class="w-full h-32 border-2 border-dashed border-gray-300 flex items-center justify-center cursor-pointer">
                      <img class="preview-image hidden" alt="Preview 2">
                      <span class="text-gray-400">Click to upload image 2</span>
                    </div>
                  </div>
                  <div>
                    <input type="file" name="images" id="images3" class="hidden" accept="image/*"/>
                    <div id="preview3" class="w-full h-32 border-2 border-dashed border-gray-300 flex items-center justify-center cursor-pointer">
                      <img class="preview-image hidden" alt="Preview 3">
                      <span class="text-gray-400">Click to upload image 3</span>
                    </div>
                  </div>
                  <div>
                    <input type="file" name="images" id="images4" class="hidden" accept="image/*"/>
                    <div id="preview4" class="w-full h-32 border-2 border-dashed border-gray-300 flex items-center justify-center cursor-pointer">
                      <img class="preview-image hidden" alt="Preview 4">
                      <span class="text-gray-400">Click to upload image 4</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Actions -->
        <div class="flex justify-end gap-4 mt-6">
          <button type="submit" class="bg-green-600 hover:bg-green-500 text-white px-6 py-2 rounded">ADD PRODUCT</button>
          <button type="button" class="bg-red-600 hover:bg-red-500 text-white px-6 py-2 rounded" onclick="resetGallery()">RESET</button>
          <button type="button" class="bg-gray-300 hover:bg-gray-200 px-6 py-2 rounded">CANCEL</button>
        </div>
      </form>
    </main>
  </div>

  <!-- Footer -->
  <footer class="bg-gray-50 text-center py-4">
    <p>2024 <span class="font-bold text-blue-600">nxtTick</span>. All rights reserved</p>
  </footer>

  <!-- Image Crop Modal -->
  <div id="cropModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-4 rounded-lg">
      <div class="w-96 h-96">
        <img id="cropImage" class="max-w-full max-h-full">
      </div>
      <div class="mt-4 flex justify-end space-x-2">
        <button id="cancelCrop" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
        <button id="saveCrop" class="bg-blue-500 text-white px-4 py-2 rounded">Save</button>
      </div>
    </div>
  </div>

  <script>
  const imageInputs = [1, 2, 3, 4].map(num => document.getElementById(`images${num}`));
  const previewDivs = [1, 2, 3, 4].map(num => document.getElementById(`preview${num}`));
  const previewImages = document.querySelectorAll('.preview-image');
  const cropModal = document.getElementById('cropModal');
  const cropImage = document.getElementById('cropImage');
  const cancelCropBtn = document.getElementById('cancelCrop');
  const saveCropBtn = document.getElementById('saveCrop');

  let currentCropper = null;
  let currentImageIndex = null;

  // Set up click handlers for preview divs
  previewDivs.forEach((div, index) => {
    div.addEventListener('click', () => {
      imageInputs[index].click();
    });
  });

  // Image input change handler
  imageInputs.forEach((input, index) => {
    input.addEventListener('change', function(e) {
      const file = this.files[0];
      if (file) {
        // Validate file type and size
        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
        if (!validTypes.includes(file.type)) {
          Swal.fire({
            icon: 'error',
            title: 'Invalid Image Format',
            text: 'Please upload images in JPG, JPEG, PNG, or GIF format only'
          });
          this.value = ''; // Clear the input
          return;
        }

        const maxSize = 5 * 1024 * 1024; // 5MB
        if (file.size > maxSize) {
          Swal.fire({
            icon: 'error',
            title: 'File Too Large',
            text: 'Image size should not exceed 5MB'
          });
          this.value = ''; // Clear the input
          return;
        }

        // Initialize cropper
        const reader = new FileReader();
        reader.onload = function(e) {
          cropImage.src = e.target.result;
          cropModal.classList.remove('hidden');
          
          if (currentCropper) {
            currentCropper.destroy();
          }

          currentCropper = new Cropper(cropImage, {
            aspectRatio: 1,
            viewMode: 1,
            minCropBoxWidth: 100,
            minCropBoxHeight: 100
          });

          currentImageIndex = index;
        };
        reader.readAsDataURL(file);
      }
    });
  });

  // Cancel crop
  cancelCropBtn.addEventListener('click', () => {
    cropModal.classList.add('hidden');
    if (currentCropper) {
      currentCropper.destroy();
      currentCropper = null;
    }
    // Clear the input of the current image
    if (currentImageIndex !== null) {
      imageInputs[currentImageIndex].value = '';
      const previewImage = previewImages[currentImageIndex];
      previewImage.classList.add('hidden');
      previewImage.src = '';
      previewImage.parentElement.querySelector('span').classList.remove('hidden');
    }
  });

  // Save cropped image
  saveCropBtn.addEventListener('click', () => {
    if (currentCropper && currentImageIndex !== null) {
      const canvas = currentCropper.getCroppedCanvas({
        maxWidth: 4096,
        maxHeight: 4096,
        imageSmoothingEnabled: false,
        imageSmoothingQuality: 'high'
      });

      canvas.toBlob((blob) => {
        // Create new file from blob with original quality
        const file = new File([blob], `cropped-image-${currentImageIndex + 1}.jpg`, { 
          type: 'image/jpeg',
        });
        
        // Update file input
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        imageInputs[currentImageIndex].files = dataTransfer.files;

        // Update preview (preview can be lower quality for performance)
        const previewImage = previewImages[currentImageIndex];
        previewImage.src = canvas.toDataURL('image/jpeg', 0.8); // Lower quality for preview only
        previewImage.classList.remove('hidden');
        previewImage.parentElement.querySelector('span').classList.add('hidden');

        // Close modal
        cropModal.classList.add('hidden');
        currentCropper.destroy();
        currentCropper = null;
      }, 'image/jpeg', 1.0); // Set quality to 1.0 for maximum quality
    }
  });

  // Reset gallery function
  function resetGallery() {
    document.getElementById("product-images").reset();
    previewImages.forEach(img => {
      img.classList.add('hidden');
      img.src = '';
      img.parentElement.querySelector('span').classList.remove('hidden');
    });
    if (currentCropper) {
      currentCropper.destroy();
      currentCropper = null;
    }
  }

  // Validate form data
  function validateForm() {
    const productName = document.getElementById("productName").value.trim();
    const description = document.getElementById("description").value.trim();
    const category = document.getElementById("category").value;
    const stock = document.getElementById("stock").value.trim();
    const price = document.getElementById("price").value.trim();
    const imageInputs = [
      document.getElementById("images1"),
      document.getElementById("images2"),
      document.getElementById("images3"),
      document.getElementById("images4"),
    ];

    // Validate Product Name
    if (productName === "") {
      Swal.fire({
        icon: "error",
        title: "Product Name Required",
        text: "Please provide a product name.",
      });
      return false;
    } else if (productName.length > 50) {
      Swal.fire({
        icon: "error",
        title: "Invalid Product Name",
        text: "Product name cannot exceed 50 characters.",
      });
      return false;
    } else if (!/^[A-Za-z\s\(\)\-\-]+$/.test(productName)) {
      Swal.fire({
        icon: "error",
        title: "Invalid Product Name",
        text: "Product name must contain only alphabets.",
      });
      return false;
    }

    // Validate Description
    if (description === "") {
      Swal.fire({
        icon: "error",
        title: "Description Required",
        text: "Please provide a description for the product.",
      });
      return false;
    }

    // Validate Category
    if (category === "") {
      Swal.fire({
        icon: "error",
        title: "Category Required",
        text: "Please select a product category.",
      });
      return false;
    }

    // Validate Stock
    if (stock === "") {
      Swal.fire({
        icon: "error",
        title: "Stock Required",
        text: "Please provide the stock quantity.",
      });
      return false;
    } else if (stock <= 0 || !Number.isInteger(+stock)) {
      Swal.fire({
        icon: "error",
        title: "Invalid Stock",
        text: "Stock must be a positive integer.",
      });
      return false;
    } else if (stock.toString().length > 10) {
      Swal.fire({
        icon: "error",
        title: "Invalid Stock",
        text: "Stock value cannot exceed 10 digits.",
      });
      return false;
    }

    // Validate Price
    if (price === "") {
      Swal.fire({
        icon: "error",
        title: "Price Required",
        text: "Please provide the price of the product.",
      });
      return false;
    } else if (price <= 0 || !Number.isInteger(+price)) {
      Swal.fire({
        icon: "error",
        title: "Invalid Price",
        text: "Price must be a positive integer.",
      });
      return false;
    } else if (price.toString().length > 10) {
      Swal.fire({
        icon: "error",
        title: "Invalid Price",
        text: "Price value cannot exceed 10 digits.",
      });
      return false;
    }

    // Validate Images
    for (let i = 0; i < imageInputs.length; i++) {
      const file = imageInputs[i].files[0];
      if (!file) {
        Swal.fire({
          icon: "error",
          title: "Missing Image",
          text: `Please upload image ${i + 1}.`,
        });
        return false;
      }
    }

    // If all validations pass
    return true;
  }

  // Event listener for form submission
  document.querySelector("#product-images").addEventListener("submit", async (event) => {
    event.preventDefault();
    if (!validateForm()) return;

    const form = event.target;
    const formData = new FormData(form);

    try {
      const response = await fetch("/admin/addProducts", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();

      if (data.status) {
        Swal.fire({
          icon: "success",
          title: "Success",
          text: data.message,
          confirmButtonText: "OK",
        }).then(() => {
          window.location.href = "/admin/allProducts"; // Redirect after clicking "OK"
        });
      } else {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: data.message || "Something went wrong!",
        });
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "Something went wrong!",
      });
    }
  });

  // Add event listeners for image input fields
  document.getElementById("images1").addEventListener("change", (event) => validateImageFormat(event.target));
  document.getElementById("images2").addEventListener("change", (event) => validateImageFormat(event.target));
  document.getElementById("images3").addEventListener("change", (event) => validateImageFormat(event.target));
  document.getElementById("images4").addEventListener("change", (event) => validateImageFormat(event.target));
</script>

</body>
</html>