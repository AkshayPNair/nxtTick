<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>All Products</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100 font-sans text-gray-800 flex flex-col min-h-screen">
  <div class="flex flex-1">
    {{!-- Sidebar --}}
    {{> sideBar}}

    <main class="flex-grow bg-white">
      <!-- Header -->
      <div class="flex items-center justify-between p-5 shadow-md">
        <h1 class="font-bold text-lg">Product</h1>
        <button class="bg-blue-600 text-white py-2 px-4 rounded-lg">Admin</button>
      </div>

      <!-- Product Listing -->
      <div class="p-5">
        <div class="flex justify-between items-center mb-5">
          <h2 class="text-lg font-bold">All Products</h2>
          <div class="flex items-center gap-3">
           <a href="deletedProducts"><button class="bg-yellow-500 hover:bg-yellow-400 text-white px-4 py-2 rounded">Deleted Products</button></a> 
           <a href="addProducts"><button class="bg-green-600 hover:bg-green-500 text-white px-4 py-2 rounded">+ Add Product</button></a>
          </div>
        </div>

        <!-- Search and Filters -->
        <div class="flex items-center justify-between bg-gray-100 p-4 shadow-sm rounded-md mb-5">
          <input type="text" placeholder="Search product..." id="search" class="flex-grow border p-2 rounded-l-md">
          <div class="flex gap-3">
            <button class="bg-gray-200 px-4 py-2 rounded-r-lg " >Search</button>
          </div>
        </div>

        <!-- Product Table -->
        <div class="overflow-x-auto rounded-md shadow-md">
          <table class="min-w-full table-auto bg-white border rounded product-table">
            <thead class="bg-gray-100 text-left">
              <tr>
                <th class="py-3 px-4 text-start w-1/6">Product</th>
                <th class="py-3 px-4 text-start w-1/6">Category</th>
                <th class="py-3 px-4 text-start w-1/6">Stock</th>
                <th class="py-3 px-4 text-start w-1/6">Price</th>
                <th class="py-3 px-4 text-start w-1/6">Status</th>
                <th class="py-3 px-4 text-center w-1/6">Action</th>
              </tr>
            </thead>
            <tbody class="divide-y" id="productTableBody">
              {{#if products.length}}
                {{#each products}}
                  <tr>
                    <td class="py-3 px-4 flex items-center gap-3">
                      <img src="{{getImage this.images 0}}" class="w-10 h-10 rounded " alt="Product">
                      <span>{{this.name}}</span>
                    </td>
                    <td class="py-3 px-4">{{this.category.name}}</td>
                    <td class="py-3 px-4">{{this.stock}}</td>
                    <td class="py-3 px-4"><span class="text-red-600 font-semibold">{{this.price}}</span></td>
                    <td class="py-3 px-4">
                      {{#if (eq this.stock 0)}}
                        <span class="bg-red-200 text-red-600 px-2 py-1 rounded-lg">Out of Stock</span>
                      {{else if (gte this.stock 11)}}
                        <span class="bg-green-200 text-green-600 px-2 py-1 rounded-lg">In Stock</span>
                      {{else}}
                        <span class="bg-red-200 text-red-600 px-2 py-1 rounded-lg">Low Stock</span>
                      {{/if}}
                    </td>
                    <td class="py-3 px-4 flex items-center justify-center gap-2">
                        <a href="editProducts/{{this._id}}">
                            <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Edit</button>
                        </a>
                        <button class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600" onclick="softDelete('{{this._id}}')"  >Delete</button>
                    </td>
                  </tr>
                {{/each}}
              {{else}}
                <tr>
                  <td colspan="7" class="text-center py-5 text-gray-500">No products found</td>
                </tr>
              {{/if}}
            </tbody>
          </table>
        </div>

        <!-- Add Pagination -->
        <div class="flex justify-between items-center mt-5 mb-5">
          <div class="text-sm text-gray-600 font-medium">
            Showing <span id="startIndex">1</span> to <span id="endIndex">5</span> of <span id="totalItems">{{products.length}}</span> entries
          </div>
          <div class="flex gap-2" id="paginationContainer">
            <button onclick="previousPage()" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded disabled:opacity-50">&lt;</button>
            <div id="pageNumbers" class="flex gap-2">
              <!-- Page numbers will be inserted here by JavaScript -->
            </div>
            <button onclick="nextPage()" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded disabled:opacity-50">&gt;</button>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Footer -->
  <footer class="bg-gray-50 text-center py-4">
    <p>2024 <span class="font-bold text-blue-600">nxtTick</span>. All rights reserved</p>
  </footer>

  <script>
    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 5;
    let filteredRows = [];
    
    // Initialize pagination on load
    document.addEventListener('DOMContentLoaded', function() {
      const rows = document.querySelectorAll(".product-table tbody tr");
      filteredRows = Array.from(rows);
      updatePagination();
      displayCurrentPage();
    });

    // Update search functionality to work with pagination
    document.getElementById('search').addEventListener("keyup", function() {
      const query = this.value.toLowerCase();
      const allRows = document.querySelectorAll(".product-table tbody tr");
      
      filteredRows = Array.from(allRows).filter(row => {
        const name = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
        return name.includes(query);
      });
      
      currentPage = 1;
      updatePagination();
      displayCurrentPage();
    });

    function displayCurrentPage() {
      const start = (currentPage - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      
      // Hide all rows first
      filteredRows.forEach(row => row.style.display = 'none');
      
      // Show only rows for current page
      filteredRows.slice(start, end).forEach(row => row.style.display = '');
      
      // Update showing entries text
      document.getElementById('startIndex').textContent = filteredRows.length ? start + 1 : 0;
      document.getElementById('endIndex').textContent = Math.min(end, filteredRows.length);
      document.getElementById('totalItems').textContent = filteredRows.length;
    }

    function updatePagination() {
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      const pageNumbers = document.getElementById('pageNumbers');
      pageNumbers.innerHTML = '';
      
      for (let i = 1; i <= totalPages; i++) {
        const button = document.createElement('button');
        button.textContent = i;
        button.className = `px-4 py-2 rounded ${currentPage === i ? 'bg-blue-600 text-white' : 'bg-gray-200 hover:bg-gray-300'}`;
        button.onclick = () => {
          currentPage = i;
          updatePagination();
          displayCurrentPage();
        };
        pageNumbers.appendChild(button);
      }
    }

    function previousPage() {
      if (currentPage > 1) {
        currentPage--;
        updatePagination();
        displayCurrentPage();
      }
    }

    function nextPage() {
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        updatePagination();
        displayCurrentPage();
      }
    }

    // Keep your existing softDelete function
    function softDelete(productId) {
      // Show a SweetAlert confirmation dialog before deletion
      Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to undo this action!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'No, cancel!',
      }).then((result) => {
        if (result.isConfirmed) {  
          fetch(`/admin/deleteProduct/${productId}`, {
            method: "DELETE",
          })
          .then(response => response.json())
          .then(result => {
            if (result.status) {
              Swal.fire(
                'Deleted!',
                'The product has been deleted.',
                'success'
              );
              location.reload(); // Reload the page to reflect changes
            } else {
              Swal.fire(
                'Failed!',
                'Failed to delete the product: ' + result.message,
                'error'
              );
            }
          })
          .catch(error => {
            console.error("Error deleting product:", error);
            Swal.fire(
              'Error!',
              'There was an error deleting the product. Please try again.',
              'error'
            );
          });
        }
      });
    }
  </script>
</body>
</html>
