<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>All Products</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100 font-sans text-gray-800 flex flex-col min-h-screen">
  <div class="flex flex-1">
    {{!-- Sidebar --}}
    {{> sideBar}}

    <main class="flex-grow bg-white">
      <!-- Header -->
      <div class="flex items-center justify-between p-5 shadow-md">
        <h1 class="font-bold text-lg">Orders</h1>
        <button class="bg-blue-600 text-white py-2 px-4 rounded-lg">Admin</button>
      </div>

      <!-- Product Listing -->
      <div class="p-5">
        <div class="flex justify-between items-center mb-5">
          <h2 class="text-lg font-bold">All Orders</h2>
        </div>

        <!-- Search and Filters -->
        <div class="flex items-center justify-between bg-gray-100 p-4 shadow-sm rounded-md mb-5">
          <input type="text" placeholder="Search product..." id="search" class="flex-grow border p-2 rounded-l-md">
          <div class="flex gap-3">
            <button class="bg-gray-200 px-4 py-2 rounded-r-lg " >Search</button>
          </div>
        </div>

        <!-- Product Table -->
        <div class="overflow-x-auto rounded-md shadow-md">
          <table class="min-w-full table-auto bg-white border rounded order-table">
            <thead class="bg-gray-100 text-left">
              <tr>
                <th class="py-3 px-4 text-center w-1/6">Product</th>
                <th class="py-3 px-4 text-center w-1/6">Order ID</th>
                <th class="py-3 px-4 text-center w-1/6">Quantity</th>
                <th class="py-3 px-4 text-start w-1/6">Price</th>
                <th class="py-3 px-4 text-start w-1/6">Status</th>
                <th class="py-3 px-4 text-center w-1/6">Action</th>
              </tr>
            </thead>
            <tbody class="divide-y" id="orderTableBody">
              {{#if orders.length}}
                {{#each orders}}
                  {{#if (ne this.paymentStatus "Failed")}}
                  <tr>
                    <td class="py-3 px-4 flex items-center gap-3">
                      <img src="{{this.items.0.product.images.[0]}}" class="w-10 h-10 rounded " alt="Product">
                      <span>{{this.items.0.product.name}}</span>
                    </td>
                    <td class="py-3 px-4">{{this._id}}</td>
                    <td class="py-3 px-4 text-center">{{this.items.0.quantity}}</td>
                    <td class="py-3 px-4"><span class="text-red-600 font-semibold">{{this.total}}</span></td>
                    <td class="py-3 px-4">
                      {{#if (eq this.status "Pending")}}
                      <span class="bg-orange-200 text-orange-600 px-2 py-1 rounded-lg font-medium">Pending</span>
                      {{else if (eq this.status "Shipped")}}
                      <span class="bg-blue-200 text-blue-600 px-2 py-1 rounded-lg font-medium">Shipped</span>
                      {{else if (eq this.status "Out for Delivery")}}
                      <span class="bg-yellow-200 text-yellow-600 px-2 py-1 rounded-lg font-medium">Out for Delivery</span>
                      {{else if (eq this.status "Delivered")}}
                      <span class="bg-green-200 text-green-600 px-2 py-1 rounded-lg font-medium">Delivered</span>
                      {{else if (eq this.status "Cancelled")}}
                      <span class="bg-red-200 text-red-600 px-2 py-1 rounded-lg font-medium">Cancelled</span>
                      {{else if (eq this.status "Returned")}}
                      <span class="bg-red-200 text-red-600 px-2 py-1 rounded-lg font-medium">Returned</span>
                      {{else}}
                      <span class="bg-gray-200 text-gray-600 px-2 py-1 rounded-lg font-medium">Unknown</span>
                      {{/if}}
                    </td>
                    <td class="py-3 px-4 flex items-center justify-center gap-2">
                      <a href="orderDetail/{{this._id}}">
                        <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">View Details</button>
                      </a>
                    </td>
                  </tr>
                  {{/if}}
                {{/each}}
              {{else}}
                <tr>
                  <td colspan="6" class="text-center py-5 text-gray-500">No orders found</td>
                </tr>
              {{/if}}
            </tbody>
          </table>
        </div>

        <!-- Add Pagination -->
        <div class="flex justify-between items-center mt-5 mb-5 px-5">
          <div class="text-sm text-gray-600 font-medium">
            Showing <span id="startIndex">1</span> to <span id="endIndex">5</span> of <span id="totalItems">{{orders.length}}</span> entries
          </div>
          <div class="flex gap-2" id="paginationContainer">
            <button onclick="previousPage()" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded disabled:opacity-50">&lt;</button>
            <div id="pageNumbers" class="flex gap-2">
              <!-- Page numbers will be inserted here by JavaScript -->
            </div>
            <button onclick="nextPage()" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded disabled:opacity-50">&gt;</button>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Footer -->
  <footer class="bg-gray-50 text-center py-4">
    <p>2024 <span class="font-bold text-blue-600">nxtTick</span>. All rights reserved</p>
  </footer>

  <script>
    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 5;
    let filteredRows = [];
    
    // Initialize pagination on load
    document.addEventListener('DOMContentLoaded', function() {
      const rows = document.querySelectorAll(".order-table tbody tr");
      filteredRows = Array.from(rows);
      updatePagination();
      displayCurrentPage();
    });

    // Update search functionality to work with pagination
    document.getElementById('search').addEventListener("keyup", function() {
      const query = this.value.toLowerCase();
      const allRows = document.querySelectorAll(".order-table tbody tr");
      
      filteredRows = Array.from(allRows).filter(row => {
        const name = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
        const orderId = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
        return name.includes(query) || orderId.includes(query);
      });
      
      currentPage = 1;
      updatePagination();
      displayCurrentPage();
    });

    function displayCurrentPage() {
      const start = (currentPage - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      
      // Hide all rows first
      filteredRows.forEach(row => row.style.display = 'none');
      
      // Show only rows for current page
      filteredRows.slice(start, end).forEach(row => row.style.display = '');
      
      // Update showing entries text
      document.getElementById('startIndex').textContent = filteredRows.length ? start + 1 : 0;
      document.getElementById('endIndex').textContent = Math.min(end, filteredRows.length);
      document.getElementById('totalItems').textContent = filteredRows.length;
    }

    function updatePagination() {
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      const pageNumbers = document.getElementById('pageNumbers');
      pageNumbers.innerHTML = '';
      
      for (let i = 1; i <= totalPages; i++) {
        const button = document.createElement('button');
        button.textContent = i;
        button.className = `px-4 py-2 rounded ${currentPage === i ? 'bg-blue-600 text-white' : 'bg-gray-200 hover:bg-gray-300'}`;
        button.onclick = () => {
          currentPage = i;
          updatePagination();
          displayCurrentPage();
        };
        pageNumbers.appendChild(button);
      }
    }

    function previousPage() {
      if (currentPage > 1) {
        currentPage--;
        updatePagination();
        displayCurrentPage();
      }
    }

    function nextPage() {
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        updatePagination();
        displayCurrentPage();
      }
    }

    // Keep your existing search functionality but modify it to work with pagination
    document.getElementById('search').addEventListener("keyup", function() {
      const query = this.value.toLowerCase();
      const allRows = document.querySelectorAll(".order-table tbody tr");
      
      filteredRows = Array.from(allRows).filter(row => {
        const name = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
        const orderId = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
        return name.includes(query) || orderId.includes(query);
      });
      
      currentPage = 1;
      updatePagination();
      displayCurrentPage();
    });
  </script>
</body>
</html>
 