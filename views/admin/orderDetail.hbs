<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/notyf/notyf.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/notyf/notyf.min.css">
</head>
<body>
    
  <div class="w-full min-h-screen bg-gray-100 py-12">
    
    <div class="max-w-6xl mx-auto p-10 bg-white shadow rounded-lg">
      <!-- Order Summary Section -->
      
      <div class="mb-12">
        <h2 class="text-2xl font-semibold mb-8">Order Summary</h2>
        
        <div class="grid grid-cols-12 gap-8 items-start ">
          {{#each order.items}}  
            <div class="col-span-2 flex justify-center">
                <img src="{{product.images.[0]}}" alt="Product Name" class="w-24 h-24 rounded-lg shadow-md">
            </div>

            <div class="col-span-8 ">
                <h3 class="text-xl font-semibold">{{product.name}}</h3>
                <p class="text-md text-gray-700 mt-4">Price: <span class="text-red-500 font-semibold">â‚¹{{subtotal}}</span> </p>
                <p class="text-md text-gray-700">Quantity: {{quantity}}</p>
            </div>
            <br>
         {{/each}} 
        </div>
      </div>
  
      <!-- Shipping Address Section -->
      <div class="mb-12">
        <h2 class="text-2xl font-semibold mb-8">Shipping Address</h2>
        <div class="p-6 bg-gray-50 rounded-lg shadow-inner">
          <p class="text-lg text-gray-800 font-medium">{{order.address.name}}</p>
          <p class="text-lg text-gray-600">{{order.address.street}}</p>
          <p class="text-lg text-gray-600">{{order.address.city}}, {{order.address.state}}, {{order.address.pinCode}}</p>
          <p class="text-lg text-gray-600">{{order.address.country}}</p>
          <p class="text-lg text-gray-600">Phone:  {{order.address.phone}}</p>
        </div>
      </div>
      
      <!-- Order Tracking Section -->
      <div class="mb-12">
        <h2 class="text-2xl font-semibold mb-8">Order Tracking</h2>
        
        <div class="relative">
          <!-- Progress Bar -->
          <div class="h-1 bg-gray-200 absolute w-full top-1/2 -translate-y-1/2 z-0 rounded-full shadow-inner">
            <div class="h-full bg-blue-500 transition-all duration-1000 ease-in-out rounded-full shadow-lg" style="width: {{#if (eq order.status 'Cancelled')}}100%{{else if (eq order.status 'Delivered')}}100%{{else if (eq order.status 'Out for Delivery')}}75%{{else if (eq order.status 'Shipped')}}50%{{else if (eq order.status 'Pending')}}25%{{else}}0%{{/if}}"></div>
          </div>
          
          <!-- Status Points -->
          <div class="relative z-10 flex justify-between">
            <!-- Pending -->
            <div class="flex flex-col items-center transform transition-all duration-500 hover:scale-110">
              <div class="w-10 h-10 rounded-full border-4 {{#if (eq order.status 'Pending')}}border-blue-500 bg-blue-500 animate-pulse shadow-lg shadow-blue-500/50{{else}}border-gray-300 bg-white shadow-lg{{/if}} flex items-center justify-center transition-all duration-300">
                <svg class="w-5 h-5 {{#if (eq order.status 'Pending')}}text-white drop-shadow-lg{{else}}text-gray-400{{/if}} transform transition-transform duration-500 hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <span class="mt-3 font-medium {{#if (eq order.status 'Pending')}}text-blue-500{{else}}text-gray-500{{/if}} transition-colors duration-300">Pending</span>
              <span class="text-sm text-gray-500">{{formatDate order.createdAt}}</span>
            </div>

            <!-- Shipped -->
            <div class="flex flex-col items-center transform transition-all duration-500 hover:scale-110">
              <div class="w-10 h-10 rounded-full border-4 {{#if (eq order.status 'Shipped')}}border-blue-500 bg-blue-500 animate-pulse shadow-lg shadow-blue-500/50{{else}}border-gray-300 bg-white shadow-lg{{/if}} flex items-center justify-center transition-all duration-300">
                <svg class="w-5 h-5 {{#if (eq order.status 'Shipped')}}text-white drop-shadow-lg{{else}}text-gray-400{{/if}} transform transition-transform duration-500 hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <span class="mt-3 font-medium {{#if (eq order.status 'Shipped')}}text-blue-500{{else}}text-gray-500{{/if}} transition-colors duration-300">Shipped</span>
              <span id="shipped-date" class="text-sm text-gray-500">
                {{#if order.shippedAt}}
                  {{formatDate order.shippedAt}}
                {{else}}
                  --
                {{/if}}
              </span>
            </div>

            <!-- Out for Delivery -->
            <div class="flex flex-col items-center transform transition-all duration-500 hover:scale-110">
              <div class="w-10 h-10 rounded-full border-4 {{#if (eq order.status 'Out for Delivery')}}border-yellow-500 bg-yellow-500 animate-pulse shadow-lg shadow-yellow-500/50{{else}}border-gray-300 bg-white shadow-lg{{/if}} flex items-center justify-center transition-all duration-300">
                <svg class="w-5 h-5 {{#if (eq order.status 'Out for Delivery')}}text-white drop-shadow-lg{{else}}text-gray-400{{/if}} transform transition-transform duration-500 hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
              </div>
              <span class="mt-3 font-medium {{#if (eq order.status 'Out for Delivery')}}text-yellow-500{{else}}text-gray-500{{/if}} transition-colors duration-300">Out for Delivery</span>
              <span id="out-for-delivery-date" class="text-sm text-gray-500">
                {{#if order.outForDeliveryAt}}
                  {{formatDate order.outForDeliveryAt}}
                {{else}}
                  --
                {{/if}}
              </span>
            </div>

            <div class="flex flex-col items-center transform transition-all duration-500 hover:scale-110">
              <div id="final-stage" class="w-10 h-10 rounded-full border-4 {{#if (eq order.status 'Cancelled')}}border-red-500 bg-red-500 animate-pulse shadow-lg shadow-red-500/50{{else if (eq order.status 'Returned')}}border-red-500 bg-red-500 animate-pulse shadow-lg shadow-red-500/50{{else if (eq order.status 'Delivered')}}border-green-500 bg-green-500 animate-pulse shadow-lg shadow-green-500/50{{else}}border-gray-300 bg-white shadow-lg{{/if}} flex items-center justify-center transition-all duration-300">
                <svg class="w-5 h-5 {{#if (or (eq order.status 'Delivered') (eq order.status 'Cancelled') (eq order.status 'Returned'))}}text-white drop-shadow-lg{{else}}text-gray-400{{/if}} transform transition-transform duration-500 hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <span class="mt-3 font-medium {{#if (eq order.status 'Cancelled')}}text-red-500{{else if (eq order.status 'Returned')}}text-red-500{{else if (eq order.status 'Delivered')}}text-green-500{{else}}text-gray-500{{/if}} transition-colors duration-300">
                {{#if (eq order.status 'Cancelled')}}
                  Cancelled
                {{else if (eq order.status 'Returned')}}
                  Returned
                {{else}}
                  Delivered
                {{/if}}
              </span>
              <span id="final-stage-date" class="text-sm text-gray-500">
                {{#if (eq order.status 'Cancelled')}}
                  {{formatDate order.cancelledAt}}
                {{else if (eq order.status 'Returned')}}
                  {{formatDate order.returnedAt}}
                {{else if order.deliveredAt}}
                  {{formatDate order.deliveredAt}}
                {{else}}
                  --
                {{/if}}
              </span>
            </div>
          </div>
        </div>
      </div>
      

      <div class="mt-8 flex">
        {{#if (and (ne order.status 'Delivered') (ne order.status 'Returned') (ne order.status 'Cancelled'))}}
          <button 
            onclick="updateOrderStatus('{{order._id}}', 'Shipped')" 
            class="px-4 py-2 bg-blue-500 text-white rounded-md shadow hover:bg-blue-600 mr-3">
            Mark as Shipped
          </button>
          <button 
            onclick="updateOrderStatus('{{order._id}}', 'Out for Delivery')" 
            class="px-4 py-2 bg-yellow-500 text-white rounded-md shadow hover:bg-yellow-600 mr-3">
            Mark as Out for Delivery
          </button>
          <button 
            onclick="updateOrderStatus('{{order._id}}', 'Delivered')" 
            class="px-4 py-2 bg-green-500 text-white rounded-md shadow hover:bg-green-600 mr-3">
            Mark as Delivered
          </button>
        {{/if}}
      </div>
  
      <!-- Additional Order Details Section -->
      <div class="mb-12 mt-10">
        <h2 class="text-2xl font-semibold mb-8">Order Details</h2>
        <div class="text-lg text-gray-700">
          <p ><span class="font-semibold">Order Date :</span> {{formatDate order.createdAt}}</p>
          <p><span class="font-semibold">Payment Method :</span> {{order.paymentMethod}}</p>
          <p><span class="font-semibold">Order ID :</span> {{order._id}}</p>
        </div>
      </div>
    </div>
  </div>

  <script>
   const notyf = new Notyf({
  duration: 3000,
  position: { x: 'right', y: 'top' },
  types: [
    { type: 'success', background: 'green', duration: 3000 },
    { type: 'error', background: 'red', duration: 3000 },
    { type: 'info', background: 'blue', duration: 3000 },
  ]
});

function formatDateToDDMMYY(dateString) {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
}


async function updateOrderStatus(orderId, status) {
  try {
    const currentDate = new Date().toISOString();

    const response = await fetch(`/admin/orderDetail/${orderId}/status`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ 
        status,
        date: currentDate
      }),
    });

    const result = await response.json();
    if (response.ok) {
      notyf.success(result.message);

      // Update the date display immediately
      const formattedDate = formatDateToDDMMYY(currentDate); // Use custom date formatting
      
      // Save status and dates to localStorage
      localStorage.setItem(`orderStatus_${orderId}`, status);
      
      if (status === 'Shipped') {
        document.getElementById('shipped-date').textContent = formattedDate;
        localStorage.setItem(`shippedDate_${orderId}`, currentDate);
      } else if (status === 'Out for Delivery') {
        document.getElementById('out-for-delivery-date').textContent = formattedDate;
        localStorage.setItem(`outForDeliveryDate_${orderId}`, currentDate);
      } else if (status === 'Delivered') {
        document.getElementById('delivered-date').textContent = formattedDate;
        localStorage.setItem(`deliveredDate_${orderId}`, currentDate);
      }

      updateProgressBar(status);
      updateButtonStates(status);
      
      // Optional: Reload page after delay
      setTimeout(() => location.reload(), 2000);
    } else {
      notyf.error(result.message || 'Failed to update status');
    }
  } catch (error) {
    console.error("Error updating order status:", error);
    notyf.error("An error occurred while updating the order status.");
  }
}

function updateProgressBar(status) {
  // Select all status points (the circular indicators)
  const stages = document.querySelectorAll('.w-10.h-10.rounded-full');
  
  // Reset all stages to default state
  stages.forEach(stage => {
    stage.classList.remove('border-blue-500', 'bg-blue-500', 
                         'border-yellow-500', 'bg-yellow-500',
                         'border-green-500', 'bg-green-500');
    stage.classList.add('border-gray-300', 'bg-white');
    
    // Reset the SVG color
    const svg = stage.querySelector('svg');
    if (svg) {
      svg.classList.remove('text-white');
      svg.classList.add('text-gray-400');
    }
  });

  // Update stages based on status
  switch(status) {
    case 'Pending':
      stages[0].classList.remove('border-gray-300', 'bg-white');
      stages[0].classList.add('border-blue-500', 'bg-blue-500');
      stages[0].querySelector('svg').classList.replace('text-gray-400', 'text-white');
      break;
      
    case 'Shipped':
      // Update Pending and Shipped
      for(let i = 0; i <= 1; i++) {
        stages[i].classList.remove('border-gray-300', 'bg-white');
        stages[i].classList.add('border-blue-500', 'bg-blue-500');
        stages[i].querySelector('svg').classList.replace('text-gray-400', 'text-white');
      }
      break;
      
    case 'Out for Delivery':
      // Update Pending, Shipped, and Out for Delivery
      for(let i = 0; i <= 2; i++) {
        stages[i].classList.remove('border-gray-300', 'bg-white');
        if(i === 2) {
          stages[i].classList.add('border-yellow-500', 'bg-yellow-500');
        } else {
          stages[i].classList.add('border-blue-500', 'bg-blue-500');
        }
        stages[i].querySelector('svg').classList.replace('text-gray-400', 'text-white');
      }
      break;
      
    case 'Delivered':
      // Update all stages
      stages.forEach((stage, index) => {
        stage.classList.remove('border-gray-300', 'bg-white');
        if(index === 3) {
          stage.classList.add('border-green-500', 'bg-green-500');
        } else if(index === 2) {
          stage.classList.add('border-yellow-500', 'bg-yellow-500');
        } else {
          stage.classList.add('border-blue-500', 'bg-blue-500');
        }
        stage.querySelector('svg').classList.replace('text-gray-400', 'text-white');
      });
      break;
  }

  updateButtonStates(status);
}

function updateButtonStates(status) {
  const shippedBtn = document.querySelector('[onclick*="Shipped"]');
  const outForDeliveryBtn = document.querySelector('[onclick*="Out for Delivery"]');
  const deliveredBtn = document.querySelector('[onclick*="Delivered"]');

  // Reset all buttons
  [shippedBtn, outForDeliveryBtn, deliveredBtn].forEach(btn => {
    btn.disabled = false;
    btn.classList.remove('bg-gray-400', 'hover:bg-gray-500', 'cursor-not-allowed');
  });

  switch(status) {
    case 'Shipped':
      shippedBtn.disabled = true;
      shippedBtn.classList.add('bg-gray-400', 'hover:bg-gray-500', 'cursor-not-allowed');
      break;
    
    case 'Out for Delivery':
      shippedBtn.disabled = true;
      outForDeliveryBtn.disabled = true;
      shippedBtn.classList.add('bg-gray-400', 'hover:bg-gray-500', 'cursor-not-allowed');
      outForDeliveryBtn.classList.add('bg-gray-400', 'hover:bg-gray-500', 'cursor-not-allowed');
      break;
    
    case 'Delivered':
      shippedBtn.disabled = true;
      outForDeliveryBtn.disabled = true;
      deliveredBtn.disabled = true;
      shippedBtn.classList.add('bg-gray-400', 'hover:bg-gray-500', 'cursor-not-allowed');
      outForDeliveryBtn.classList.add('bg-gray-400', 'hover:bg-gray-500', 'cursor-not-allowed');
      deliveredBtn.classList.add('bg-gray-400', 'hover:bg-gray-500', 'cursor-not-allowed');
      break;
  }
}

// On page load, check if there's a stored status and update the progress bar
window.onload = function() {
  const orderId = '{{order._id}}';
  const savedStatus = localStorage.getItem(`orderStatus_${orderId}`);
  const savedShippedDate = localStorage.getItem(`shippedDate_${orderId}`);
  const savedOutForDeliveryDate = localStorage.getItem(`outForDeliveryDate_${orderId}`);
  const savedDeliveredDate = localStorage.getItem(`deliveredDate_${orderId}`);

  if (savedStatus) {
    updateProgressBar(savedStatus);
    updateButtonStates(savedStatus);
  } else {
    const initialStatus = '{{order.status}}';
    updateProgressBar(initialStatus);
    updateButtonStates(initialStatus);
  }

  if (savedShippedDate) {
    document.getElementById('shipped-date').textContent = formatDateToDDMMYY(savedShippedDate);
  }
  if (savedOutForDeliveryDate) {
    document.getElementById('out-for-delivery-date').textContent = formatDateToDDMMYY(savedOutForDeliveryDate);
  }
  if (savedDeliveredDate) {
    document.getElementById('delivered-date').textContent = formatDateToDDMMYY(savedDeliveredDate);
  }
}
  
</script>

</body>
</html>