<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Product</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100 font-sans text-gray-800 flex flex-col min-h-screen">
  <div class="flex">
    <!-- Sidebar -->
    {{> sideBar}}

    <!-- Main Content -->
    <main class="flex-1 bg-white p-5">
      <!-- Header -->
      <div class="flex items-center justify-between mb-5">
        <h1 class="font-bold text-xl">Edit Product</h1>
        <button class="bg-blue-600 text-white py-2 px-4 rounded-lg">Admin</button>
      </div>

      <!-- Breadcrumbs -->
      <div class="text-sm text-gray-500 mb-5">
        <span>Dashboard</span> > <span>All Products</span> > <span class="text-blue-600">Edit Product</span>
      </div>

      <!-- Form Section -->
      <form id="product-form">
        <input type="hidden" id="productId" name="productId" value="{{product._id}}" />
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <!-- Form Inputs -->
          <div class="lg:col-span-2 bg-gray-50 p-5 rounded shadow">
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium">Product Name</label>
                <input type="text" id="productName" name="productName" value="{{product.name}}" placeholder="Product Name..." class="w-full border p-2 rounded" >
              </div>
              <div>
                <label class="block text-sm font-medium">Description</label>
                <textarea name="description" id="description" placeholder="Product description" class="w-full border p-2 rounded h-24" >{{product.description}}</textarea>
              </div>
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium">Category</label>
                  {{!-- <input type="text" name="category" value="{{product.category}}" id="category" placeholder="Product category" class="w-full border p-2 rounded" required> --}}
                  <select name="category" id="category" class="w-full border p-2 rounded" >
                  {{#each categories}}
                      <option value="{{this._id}}" {{#if (eq this._id ../product.category._id)}}selected{{/if}}>{{this.name}}</option>
                  {{/each}}
                </div>
                <div>
                  <label class="block text-sm font-medium">Brand Name</label>
                  <input type="text" name="brand" id="brand" value="{{product.brand}}" placeholder="Brand name" class="w-full border p-2 rounded">
                </div>
              </div>
              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium">Stock Quantity</label>
                  <input type="number" name="stock" id="stock" value="{{product.stock}}" placeholder="quantity" class="w-full border p-2 rounded" >
                </div>
                <div>
                  <label class="block text-sm font-medium">Sale Price</label>
                  <input type="number" name="price" id="price" value="{{product.price}}" placeholder="sale price" class="w-full border p-2 rounded" >
                </div>
              </div>
            </div>
          </div>

          <!-- Product Gallery -->
          <div class="bg-gray-50 p-5 rounded shadow">
            <div>
              <label class="block text-sm font-medium">Product Gallery</label>
              <div class="space-y-4">
                <!-- Image Upload Option -->
                <div>
                  <input type="file" name="images" id="images1" onchange="previewImage(this)" class="w-full border p-2 rounded" />
                  <input type="file" name="images" id="images2" onchange="previewImage(this)" class="w-full border p-2 rounded mt-2" />
                  <input type="file" name="images" id="images3" onchange="previewImage(this)" class="w-full border p-2 rounded mt-2" />
                  <input type="file" name="images" id="images4" onchange="previewImage(this)" class="w-full border p-2 rounded mt-2" />
                </div>

                <!-- Display Images Below Gallery -->
                <div id="image-gallery" class="flex flex-wrap mt-4">
                  <!-- Loop through existing images and display them -->
                  {{#each product.images}}
                    <div class="w-32 h-32 bg-gray-200 flex items-center justify-center m-2 rounded-lg">
                      <img src="{{this}}" alt="Product Image" class="w-full h-full rounded-lg object-cover" />
                    </div>
                  {{/each}}
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Actions -->
        <div class="flex justify-end gap-4 mt-6">
          <button type="submit" class="bg-green-600 hover:bg-green-500 text-white px-6 py-2 rounded">SAVE CHANGES</button>
          <button type="button" class="bg-gray-300 hover:bg-gray-200 px-6 py-2 rounded" onclick="window.location.href='/admin/allProducts'">CANCEL</button>
        </div>
      </form>
    </main>
  </div>

  <!-- Footer -->
  <footer class="bg-gray-50 text-center py-4">
    <p>2024 <span class="font-bold text-blue-600">nxtTick</span>. All rights reserved</p>
  </footer>

  <script>
  // Optional: Handle the form submission with fetch for better UX
  document.getElementById('product-form').addEventListener('submit', async (event) => {
    event.preventDefault();

    // Validate the form before submission
    function validateForm() {
      const productName = document.getElementById("productName").value.trim();
      const description = document.getElementById("description").value.trim();
      const category = document.getElementById("category").value;
      const stock = document.getElementById("stock").value.trim();
      const price = document.getElementById("price").value.trim();
      const imageInputs = [
        document.getElementById("images1"),
        document.getElementById("images2"),
        document.getElementById("images3"),
        document.getElementById("images4"),
      ];

      // Validate Product Name
      if (productName === "") {
        Swal.fire({
          icon: "error",
          title: "Product Name Required",
          text: "Please provide a product name.",
        });
        return false;
      } else if (productName.length > 30) {
        Swal.fire({
          icon: "error",
          title: "Invalid Product Name",
          text: "Product name cannot exceed 30 characters.",
        });
        return false;
      } else if (!/^[A-Za-z\s\(\)\[\]\{\}\-\&]+$/.test(productName)) {
        Swal.fire({
          icon: "error",
          title: "Invalid Product Name",
          text: "Product name must contain only alphabets.",
        });
        return false;
      }

      // Validate Description
      if (description === "") {
        Swal.fire({
          icon: "error",
          title: "Description Required",
          text: "Please provide a description for the product.",
        });
        return false;
      }

      // Validate Category
      if (category === "") {
        Swal.fire({
          icon: "error",
          title: "Category Required",
          text: "Please select a product category.",
        });
        return false;
      }

      // Validate Stock
      if (stock === "") {
        Swal.fire({
          icon: "error",
          title: "Stock Required",
          text: "Please provide the stock quantity.",
        });
        return false;
      } else if (stock < 0 || !Number.isInteger(+stock)) {
        Swal.fire({
          icon: "error",
          title: "Invalid Stock",
          text: "Stock must be a positive integer.",
        });
        return false;
      } else if (stock.toString().length > 10) {
        Swal.fire({
          icon: "error",
          title: "Invalid Stock",
          text: "Stock value cannot exceed 10 digits.",
        });
        return false;
      }

      // Validate Price
      if (price === "") {
        Swal.fire({
          icon: "error",
          title: "Price Required",
          text: "Please provide the price of the product.",
        });
        return false;
      } else if (price <= 0 || !Number.isInteger(+price)) {
        Swal.fire({
          icon: "error",
          title: "Invalid Price",
          text: "Price must be a positive integer.",
        });
        return false;
      } else if (price.toString().length > 10) {
        Swal.fire({
          icon: "error",
          title: "Invalid Price",
          text: "Price value cannot exceed 10 digits.",
        });
        return false;
      }

      // Only validate images if new images are uploaded
      for (let i = 0; i < imageInputs.length; i++) {
        const file = imageInputs[i].files[0];
        if (file && !file.type.startsWith('image/')) {
          Swal.fire({
            icon: "error",
            title: `Invalid Image ${i + 1}`,
            text: "Please upload a valid image file (e.g., .jpg, .jpeg, .png, .gif).",
          });
          return false;
        }
      }

      // If all validations pass
      return true;
    }

    if (!validateForm()) return;

    var formData = new FormData();

    const productId = document.getElementById("productId").value;
    const productName = document.getElementById("productName").value;
    const description = document.getElementById("description").value;
    const category = document.getElementById("category").value;
    const brand = document.getElementById("brand").value;
    const stock = document.getElementById("stock").value;
    const price = document.getElementById("price").value;
    const images1 = document.getElementById('images1').files[0];
    const images2 = document.getElementById('images2').files[1];
    const images3 = document.getElementById('images3').files[2];
    const images4 = document.getElementById('images4').files[3];

    formData.append("productId", productId);
    formData.append("productName", productName);
    formData.append("description", description);
    formData.append("category", category);
    formData.append("brand", brand);
    formData.append("stock", stock);
    formData.append("price", price);

    if (images1) formData.append("images", images1);
    if (images2) formData.append("images", images2);
    if (images3) formData.append("images", images3);
    if (images4) formData.append("images", images4);

    console.log(formData);

    try {
      const response = await fetch(`/admin/editProducts/${productId}`, {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (data.status) {
        Swal.fire({
          icon: 'success',
          title: 'Product Updated',
          text: data.message,
        }).then(() => {
          window.location.href = '/admin/allProducts'; 
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'Something went wrong!',
        });
      }
    } catch (error) {
      console.error(error);
      Swal.fire({
        icon: 'error',
        title: 'Server Error',
        text: 'Failed to update product.',
      });
    }
  });

  // Add event listeners for image input fields for immediate format validation
  document.getElementById("images1").addEventListener("change", (event) => validateImageFormat(event.target));
  document.getElementById("images2").addEventListener("change", (event) => validateImageFormat(event.target));
  document.getElementById("images3").addEventListener("change", (event) => validateImageFormat(event.target));
  document.getElementById("images4").addEventListener("change", (event) => validateImageFormat(event.target));

  function validateImageFormat(input) {
    const file = input.files[0];
    if (file && !file.type.startsWith('image/')) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Image Format',
        text: 'This image must be in jpg, jpeg, png format.',
      });
      input.value = ''; // Clear the input if invalid image
    }
  }
</script>



</body>
</html>
