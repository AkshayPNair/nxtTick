<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Customers</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>
<body class="bg-gray-100 font-sans text-gray-800 flex flex-col min-h-screen">
  <div class="flex flex-1">
    <!-- Sidebar -->
    {{> sideBar}}

    <main class="flex-grow bg-white">
      <!-- Header -->
      <div class="flex items-center justify-between mb-5 shadow-md p-5 bg-white">
        <h1 class="font-bold text-lg">Customers</h1>
        <button class="bg-blue-600 text-white py-2 px-4 rounded-lg">Admin</button>
      </div>

      <!-- Breadcrumbs -->
      <div class="mb-5 px-5">
        <nav class="text-gray-600 text-sm">
          <a href="/admin/dashBoard" class="hover:text-blue-600">Dashboard</a> &gt;
          <a href="/admin/coustmers" class="hover:text-blue-600">Customers</a> &gt;
          <span class="font-bold">All Customers</span>
        </nav>
      </div>

      <!-- Customers Listing -->
      <div class="pl-5 pr-5">
        <div class="flex justify-between items-center mb-5">
          <h2 class="text-lg font-bold">All Customers</h2>
        </div>

        <!-- Search -->
        <div class="flex items-center justify-between bg-gray-100 p-4 rounded-md shadow-sm mb-5">
          <input type="text" id="search" placeholder="Search customer..." class="flex-grow border p-2 rounded-l-md">
          <button class="bg-gray-200 px-4 py-2 rounded-r-lg">Search</button>
        </div>

        <!-- Customers Table -->
        <div class="overflow-x-auto rounded-md shadow-md">
          <table class="min-w-full table-auto bg-white border rounded-lg  coustmer-table">
            <thead class="bg-gray-100 text-left">
              <tr>
                <th class="py-3 px-4 text-sm text-gray-600">Name</th>
                <th class="py-3 px-4 text-sm text-gray-600">Email</th>
                <th class="py-3 px-4 text-sm text-gray-600">Status</th>
                <th class="py-3 px-4 text-center text-sm text-gray-600">Action</th>
              </tr>
            </thead>
            <tbody class="divide-y" id="customerTableBody">
              <!-- Sample Row 1 -->
              {{#each users}}
              <tr>
                <td class="py-3 px-4 flex items-center gap-3">
                  {{!-- <img src="/images/captin-america.jpg" class="w-10 h-10 rounded" alt="Customer"> --}}
                  <span>{{this.name}}</span>
                </td>
                <td class="py-3 px-4">{{this.email}}</td>
                <td class="py-3 px-4">
                  {{#if this.isBlock}}
                    <span class="bg-red-100 text-red-600 px-3 py-1 rounded-full text-sm">Inactive</span>
                  {{else}}
                    <span class="bg-green-100 text-green-600 px-3 py-1 rounded-full text-sm">Active</span> 
                  {{/if}}   
                </td>
                <td class="py-3 px-4 flex justify-center gap-2">
                    <button id="block-button" 
                      class="{{#if this.isBlock}}bg-green-500 hover:bg-green-600{{else}}bg-red-500 hover:bg-red-600{{/if}} text-white px-4 py-2 rounded" 
                      onclick="toggleStatus(this, '{{this._id}}')">
                      {{#if this.isBlock}}Unblock{{else}}Block{{/if}}
                    </button>
                </td>
              </tr>
              {{/each}}
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <div class="flex justify-between items-center mt-5 mb-5">
          <div class="text-sm text-gray-600 font-medium">
            Showing <span id="startIndex">1</span> to <span id="endIndex">5</span> of <span id="totalItems">{{users.length}}</span> entries
          </div>
          <div class="flex gap-2" id="paginationContainer">
            <button onclick="previousPage()" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded disabled:opacity-50">&lt;</button>
            <div id="pageNumbers" class="flex gap-2">
              <!-- Page numbers will be inserted here by JavaScript -->
            </div>
            <button onclick="nextPage()" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded disabled:opacity-50">&gt;</button>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Footer -->
  <footer class="bg-gray-50 text-center py-4">
    <p>2024 <span class="font-bold text-blue-600">nxtTick</span>. All rights reserved</p>
  </footer>

  <script>
    // Pagination variables
    let currentPage = 1;
    const itemsPerPage = 5; // Changed to 5 users per page
    let filteredRows = [];
    
    // Initialize pagination on load
    document.addEventListener('DOMContentLoaded', function() {
      const rows = document.querySelectorAll(".coustmer-table tbody tr");
      filteredRows = Array.from(rows);
      updatePagination();
      displayCurrentPage();
    });

    // Search functionality
    document.getElementById('search').addEventListener("keyup", function() {
      const query = this.value.toLowerCase();
      const allRows = document.querySelectorAll(".coustmer-table tbody tr");
      
      filteredRows = Array.from(allRows).filter(row => {
        const name = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
        return name.includes(query);
      });
      
      currentPage = 1;
      updatePagination();
      displayCurrentPage();
    });

    function displayCurrentPage() {
      const start = (currentPage - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      
      // Hide all rows first
      filteredRows.forEach(row => row.style.display = 'none');
      
      // Show only rows for current page
      filteredRows.slice(start, end).forEach(row => row.style.display = '');
      
      // Update showing entries text
      document.getElementById('startIndex').textContent = filteredRows.length ? start + 1 : 0;
      document.getElementById('endIndex').textContent = Math.min(end, filteredRows.length);
      document.getElementById('totalItems').textContent = filteredRows.length;
    }

    function updatePagination() {
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      const pageNumbers = document.getElementById('pageNumbers');
      pageNumbers.innerHTML = '';
      
      for (let i = 1; i <= totalPages; i++) {
        const button = document.createElement('button');
        button.textContent = i;
        button.className = `px-4 py-2 rounded ${currentPage === i ? 'bg-blue-600 text-white' : 'bg-gray-200 hover:bg-gray-300'}`;
        button.onclick = () => {
          currentPage = i;
          updatePagination();
          displayCurrentPage();
        };
        pageNumbers.appendChild(button);
      }
    }

    function previousPage() {
      if (currentPage > 1) {
        currentPage--;
        updatePagination();
        displayCurrentPage();
      }
    }

    function nextPage() {
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        updatePagination();
        displayCurrentPage();
      }
    }

    function toggleStatus(button, userId) {
      const currentStatus = button.innerText === "Block" ? false : true;

      Swal.fire({
        title: `Are you sure you want to block/unblock user?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: `Yes`,
      }).then((result)=>{
        if(result.isConfirmed){
          fetch(`/admin/users/${userId}/toggle-block`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ isBlock: !currentStatus }),
          })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              button.innerText = currentStatus ? "Block" : "Unblock";
              
              if (!currentStatus) {
                button.classList.remove("bg-red-500", "hover:bg-red-600");
                button.classList.add("bg-green-500", "hover:bg-green-600");
              } else {
                button.classList.remove("bg-green-500", "hover:bg-green-600");
                button.classList.add("bg-red-500", "hover:bg-red-600");
              }

              const statusCell = button.parentElement.parentElement.querySelector(
                "td:nth-child(3) span"
              );

              if (!currentStatus) {
                statusCell.textContent = "Inactive";
                statusCell.classList.remove("bg-green-100", "text-green-600");
                statusCell.classList.add("bg-red-100", "text-red-600");
              } else {
                statusCell.textContent = "Active";
                statusCell.classList.remove("bg-red-100", "text-red-600");
                statusCell.classList.add("bg-green-100", "text-green-600");
              }
            }
          })
          .then(()=>{
            window.location.reload()
          })
          .catch((error) => {
            console.error("Error updating user status:", error);
            alert("An error occurred while updating the user status.");
          });
        }
      });
    }
  </script>
</body>
</html>
