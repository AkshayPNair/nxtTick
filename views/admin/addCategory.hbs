<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Category</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.tailwindcss.com"></script> 
</head>
<body class="bg-gray-100 font-sans text-gray-800 flex flex-col min-h-screen">

  <!-- Main Container -->
  <div class="flex flex-1">
    <!-- Sidebar -->
    {{> sideBar}}

    <!-- Content -->
    <main class="flex-grow bg-white p-6">
      <!-- Header -->
      <div class="flex items-center justify-between mb-5">
        <h1 class="font-bold text-lg">Add Category</h1>
        <button class="bg-blue-600 text-white py-2 px-4 rounded-lg">Admin</button>
      </div>

      <!-- Breadcrumb -->
      <div class="text-sm text-gray-500 mb-6">
        <span>Dashboard</span> > <span>Categories</span> > <span class="text-blue-600">Add Category</span>
      </div>

      <!-- Add Category Form -->
      <form id="categoryForm" action="/admin/addCategory" method="POST" enctype="multipart/form-data" class="space-y-6">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <!-- Thumbnail Section -->
          <div class="bg-gray-50 p-5 rounded shadow">
            <h2 class="font-medium text-gray-700 mb-4">Image</h2>
            <div class="border border-dashed border-gray-400 p-6 rounded flex flex-col justify-center items-center">
              <!-- Image Preview -->
              <div id="imagePreview" class="w-32 h-32 bg-gray-200 flex justify-center items-center mb-4">
                <span class="text-gray-500">No Image</span>
              </div>
              <!-- File Input -->
              <input type="file" id="categoryImage" name="categoryImage" class="hidden" accept="image/*" >
              <label for="categoryImage" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded cursor-pointer">
                Add Image
              </label>
              <p id="imageError" class="text-red-500 text-sm mt-2 hidden">Image is required.</p>
            </div>
          </div>

          <!-- General Information Section -->
          <div class="lg:col-span-2 bg-gray-50 p-5 rounded shadow">
            <h2 class="font-medium text-gray-700 mb-4">General Information</h2>
            <div class="space-y-4">
              <div>
                <label for="category-name" class="block text-sm font-medium text-gray-700">Category Name</label>
                <input id="categoryName" name="categoryName" type="text" placeholder="Type category name here..." class="w-full border p-2 rounded" >
              </div>
              <div>
                <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                <textarea id="description" name="description" placeholder="Type category description here..." class="w-full border p-2 rounded h-24"></textarea>
              </div>
            </div>
          </div>
        </div>

        <!-- Actions -->
        <div class="flex justify-end gap-4">
          <button type="button" class="bg-gray-300 hover:bg-gray-200 text-gray-700 px-6 py-2 rounded" onclick="window.history.back()">Cancel</button>
          <button type="submit" class="bg-green-600 hover:bg-green-500 text-white px-6 py-2 rounded">+ Add Category</button>
        </div>
      </form>
    </main>
  </div>

  <!-- Footer -->
  <footer class="bg-gray-50 text-center py-4">
    <p>2024 <span class="font-bold text-blue-600">nxtTick</span>. All rights reserved</p>
  </footer>

  <!-- Script for Validation -->
<script>
  const form = document.getElementById('categoryForm');
  const categoryName = document.getElementById('categoryName');
  const categoryImage = document.getElementById('categoryImage');
  const imagePreview = document.getElementById('imagePreview');

  // Allowed image formats
  const allowedExtensions = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif'];

  // Preview Image on Change and Validate Format
  categoryImage.addEventListener('change', async function (event) {
    const file = event.target.files[0];
    if (file) {
      const fileType = file.type;

      // Check if file type is valid
      if (!allowedExtensions.includes(fileType)) {
        await Swal.fire({
          icon: 'error',
          title: 'Invalid File Format',
          text: 'Only image files (JPEG, PNG, JPG, GIF) are supported!',
        });
        categoryImage.value = ''; // Clear the input
        imagePreview.innerHTML = '<span class="text-gray-500">No Image</span>'; // Reset preview
        return;
      }

      // Display image preview if valid
      const reader = new FileReader();
      reader.onload = function (e) {
        imagePreview.innerHTML = `<img src="${e.target.result}" class="w-full h-full object-cover rounded" alt="Image Preview">`;
      };
      reader.readAsDataURL(file);
    } else {
      imagePreview.innerHTML = '<span class="text-gray-500">No Image</span>';
    }
  });

  // Form Submission with Validation
  form.addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent default form submission
    let valid = true;

    // Validate Category Name
    const nameRegex = /^[A-Za-z\s]+$/; // Regex for alphabets and spaces
    if (!categoryName.value.trim()) {
      valid = false;
      await Swal.fire({
        icon: 'error',
        title: 'Category name is required!',

      });
      return;
    } else if (!nameRegex.test(categoryName.value.trim())) {
      valid = false;
      await Swal.fire({
        icon: 'error',
        title: 'Category name can only contain alphabets!',
      });
      return;
    }else if(categoryName.value.trim().length < 4){
      valid=false;
      await Swal.fire({
        icon: 'error',
        title: 'Category name at least 4 characters long.',
      });
    }

    // Validate Category Image
    if (!categoryImage.files.length) {
      valid = false;
      await Swal.fire({
        icon: 'error',
        title: 'Category image is required!',
      });
      return;
    } else {
      const allowedExtensions = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif'];
      const fileType = categoryImage.files[0].type;
      if (!allowedExtensions.includes(fileType)) {
        valid = false;
        await Swal.fire({
          icon: 'error',
          title: 'Only image files (JPEG, PNG, JPG, GIF) are allowed!',
        });
        return;
      }
    }

    // If Validation Passes, Submit Form Data
    if (valid) {
      const formData = new FormData(form);
      try {
        const response = await fetch("/admin/addCategory", {
          method: "POST",
          body: formData,
        });

        const data = await response.json();

        // SweetAlert for Success/Failure
        if (data.status) {
          Swal.fire({
            icon: "success",
            title: "Success",
            text: data.message,
            confirmButtonText: "OK",
          }).then(() => {
            window.location.href = "/admin/allcategory";
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: data.message || "Something went wrong!",
          });
        }
      } catch (error) {
        console.error("Error Occurred:", error);
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Something went wrong!",
        });
      }
    }
  });
</script>



</body>
</html>
